go:tell(Input) :-
    go:uuid(Uuid)
    go:assert(
        go:goal(
            go:respond(Input),
            Uuid));

go:respond(Input) :-
    go:let(Output, '')
    go:ignore(
        go:start_input()
        go:find_locale(Locale)
        go:slot(locale, Locale)
        go:tokenize(Locale, Input, InTokens)
        go:parse(Locale, InTokens, ParseTree)
        go:relationize(ParseTree, Request, RequestBinding, UnresolvedName)
/*        go:ellipsis(ParseTree, CompletedParseTree)
        go:relationize(CompletedParseTree, Request, RequestBinding, UnresolvedName)*/
        go:if_then(
            go:not_equals(UnresolvedName, ''),
            go:create_canned(Output, name_not_found, UnresolvedName)
            go:fail()
        )

        go:cut(1,
            go:find_solution(Request, Solution)
            go:make_list(Solutions, Solution)
            go:exec_solution(Request, RequestBinding, Solutions, Output, Accepted, AcceptedBindings)
        )

        go:find_response(Accepted, AcceptedBindings, ResponseBindings, ResponseIndex)
        go:create_answer(Accepted, ResponseBindings, ResponseIndex, Answer)

        go:generate(Locale, Answer, OutTokens)
        go:surface(OutTokens, Output)
    )
    go:uuid(Uuid)
    go:wait_for(
        go:print(Uuid, Output)
    )
;

go:exec_solution(Request, RequestBinding, Solutions, Output, Accepted, AcceptedBindings) :-
    go:list_length(Solutions, SolSize)
    go:subtract(SolSize, 1, LastSol)
    go:list_foreach(Solutions, Index, Sol,

         go:retract(go:output(_))
         go:solve(Request, RequestBinding, Sol, ResultBindings, ResultCount)

         go:if_then(
             go:output(O),
             go:let(Output, O) go:break()
         )
         go:if_then(
             go:greater_than(ResultCount, 0),
             go:let(Accepted, Sol) go:let(AcceptedBindings, ResultBindings) go:break()
         )
         go:if_then(
             go:equals(LastSol, Index),
             go:let(Accepted, Sol) go:let(AcceptedBindings, ResultBindings) go:break()
         )
         go:fail()
    )

    go:if_then(
         go:output(O),
         go:fail()
     )
;