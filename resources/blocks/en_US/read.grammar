[
    /* quantifiers */

    { rule: qp(_) -> quantifier(Result, Range),                            sense: quantifier(Result, Range, sem(1)) }
    { rule: quantifier(Result, Range) -> an(_),                            sense: greater_than(Result, 0) }
    { rule: quantifier(Result, Range) -> 'at' 'least' 'one' 'of',          sense: greater_than(Result, 0) }
    { rule: quantifier(Result, Range) -> number(N1),                       sense: equals(Result, N1) }
    { rule: quantifier(Result, Range) -> 'two',                            sense: equals(Result, 2) }

    { rule: number(N1) -> /^[0-9]+/ }

    { rule: an(E1) -> 'a' }
    { rule: an(E1) -> 'an' }
    { rule: the(E1) -> 'the' }

    /* verbs */

    { rule: tv(P1, E1, E2) -> 'pick' 'up',                                 sense: do_pick_up_smart(P1, E2) }
    { rule: tv(P1, E1, E2) -> 'grasp',                                     sense: do_pick_up_smart(P1, E2) }
    { rule: tv(P1, E1, E2) -> 'find' }
    { rule: tv_gerund(P1, E1, E2) -> 'holding',                            sense: hold(P1, E1, E2) }
    { rule: tv_infinitive(P1, E1, E2) -> 'pick' 'up',                      sense: pick_up(P1, E1, E2) }
    { rule: tv_infinitive(P1, E1, E2) -> 'support',                        sense: support(P1, E1, E2) }

    { rule: vp(P1) -> tv(P1, _, E1) np(E1),                                sense: do(sem(2), sem(1)) }
    { rule: vp(P1) -> 'put' np(E1) 'into' np(E2),                          sense: do([sem(2) sem(4)], do_put_in_smart(P1, E1, E2)) }
    { rule: vp(P1) -> 'stack' 'up' np(E1),                                 sense: do_stack_up_smart(P1, sem(3)) }
    { rule: vp(P1, E1) -> np(E2) 'to' tv_infinitive(P1, E2, E1),           sense: find(sem(1), sem(3)) }
    { rule: vp(P1, E1, E2) -> np(E1) tv_infinitive(P1, E1, E2) np(E2),     sense: find([sem(1) sem(3)], sem(2))  }
    { rule: vp(P1, E1, E2) -> np(E2) 'be' past_participle(P1, E1, E2) 'by' np(E1), sense: find([sem(1) sem(5)], sem(3)) }

    { rule: vp_dep(P1, L1) -> np(E1) tell(P1) vp(P2, L1),                  sense: find(sem(1), tell(P1, sem(3))) }

    { rule: copula(C1) -> 'is' }
    { rule: copula(C1) -> 'are' }

    { rule: aux_be(A1) -> 'is'}
    { rule: aux_be(A1) -> 'are' }

    { rule: aux_do(A1) -> 'does' }

    { rule: tell(P1) -> 'told' }
    { rule: contain(P1) -> 'contain' }
    { rule: can(P1) -> 'can' }

    { rule: past_participle(P1, E2, E1) -> 'supported',                    sense: support(P1, E2, E1) }

    /* nouns */

    { rule: adjp(E1) -> 'taller' 'than' np(E2),                            sense: find(sem(3), taller(E1, E2)) }
    { rule: adjp(E1) -> 'narrower' 'than' np(E2),                          sense: find(sem(3), narrower(E1, E2)) }
    { rule: adjp(E1) -> adjective(E1) }

    { rule: adjective(E1) -> 'red',                                        sense: red(E1) }
    { rule: adjective(E1) -> 'big',                                        sense: big(E1) }

    { rule: pp(E1) -> 'in' np(E2),                                         sense: find(sem(2), contain(_, E2, E1)) }

    { rule: relative_clause(E1) -> 'which' copula(C1) adjp(E1) }
    { rule: relative_clause(E1) -> np(E2) aux_be(A1) tv_gerund(P1, E2, E1), sense: find(sem(1), sem(3)) }
    { rule: relative_clause(E1) -> 'which' vp_dep(P1, E1) }

    { rule: np(E1) -> qp(_) nbar(E1),                                      sense: quant(sem(1), E1, sem(2)) }
    { rule: np(E1) -> the(E1) nbar(E1),                                    sense: quant(quantifier(Result, Range, equals(Result, 1)), E1, [definite_reference(E1, sem(2)) ]) }
    { rule: np(E1) -> nbar(E1),                                            sense: quant(quantifier(Result, Range, greater_than(Result, 0)), E1, sem(1)) }
    { rule: np(E1) -> pronoun(E1),                                         sense: quant(quantifier(Result, Range, greater_than(Result, 0)), E1, sem(1)) }

    { rule: nbar(E1) -> adjp(E1) nbar(E1) }
    { rule: nbar(E1) -> noun(E1) relative_clause(E1) }
    { rule: nbar(E1) -> noun(E1) }
    { rule: nbar(E1) -> 'them',                                            sense: back_reference(E1, []) }

    { rule: noun(E1) -> 'one',                                             sense: object(E1) }
    { rule: noun(E1) -> 'block',                                           sense: block(E1) }
    { rule: noun(E1) -> 'blocks',                                          sense: block(E1) }
    { rule: noun(E1) -> 'pyramid',                                         sense: pyramid(E1) }
    { rule: noun(E1) -> 'pyramids',                                        sense: pyramid(E1) }
    { rule: noun(E1) -> 'table',                                           sense: table(E1) }
    { rule: noun(E1) -> 'box',                                             sense: box(E1) }

    { rule: pronoun(E1) -> 'you',                                          sense: you(E1) }
    { rule: pronoun(E1) -> 'i',                                            sense: i(E1) }
    { rule: pronoun(E1) -> 'it',                                           sense: back_reference(E1, []) }

    /* Misc */

    { rule: and(C1) -> 'and' }

    /* Sentences */

    { rule: what_clause(P1, E2) -> aux_do(A1) np(E1) contain(P1),                       sense: find(sem(2), contain(P1, E1, E2)) }
    { rule: what_clause(P1, E2) -> aux_be(A1) np(E1) past_participle(P1, E2, E1) 'by',  sense: find(sem(2), sem(3)) }

    { rule: how_many_clause(P1, E1) -> np(E1) copula(C1) 'not' pp(E1),                  sense: find(sem(1), not(sem(4))) }

    { rule: interrogative_clause(P1) -> 'what' what_clause(P1, E1),                     sense: what(E1) }
    { rule: interrogative_clause(P1) -> 'how' 'many' how_many_clause(P1, E1),           sense: how_many(E1) }
    { rule: interrogative_clause(P1) -> copula(C1) np(E1) adjp(E1),                     sense: find(sem(2), [sem(3) select(E1)]) }
    { rule: interrogative_clause(P1) -> copula(C1) np(E1) past_participle(P1, E2, E1),  sense: find(sem(2), select_subject(E2)) }
    { rule: interrogative_clause(P1) -> can(_) vp(P1, E1, E2),                          sense: yes_no() }

    { rule: interrogative(P1) -> interrogative_clause(P1) '?' }

    { rule: imperative_clause(P1) -> vp(P1),                                            sense: command(P1) }
    { rule: imperative_clause(C) -> imperative_clause(P1) and(C) imperative_clause(P2), sense: and(C, sem(1), sem(3)) }

    { rule: imperative(P1) -> imperative_clause(P1) '.' }
    { rule: imperative(P1) -> imperative_clause(P1) }

    { rule: s(S1) -> imperative(S1) }
    { rule: s(S1) -> interrogative(S1),                                     sense: question(S1) }
]