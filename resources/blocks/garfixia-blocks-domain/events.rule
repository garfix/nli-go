/*
    Events - contains all time related rules.
*/

increase_time() :-
    time(T)
    [T2 := [T + 1]]
    go:retract(time(_))
    go:assert(time(T2))
;

before(Event1, Event2) :-
    end_time(Event1, End)
    start_time(Event2, Start)
    [End < Start]
;

after(Event1, Event2) :-
    end_time(Event1, End)
    start_time(Event2, Start)
    [End > Start]
;

while(Event1, Event2) :-
    start_time(Event1, Start1)
    end_time(Event1, End1)
    start_time(Event2, Start2)
    end_time(Event2, End2)
    [Start1 >= Start2]
    [End1 <= End2]
;

filter_event(Event) :-
    go:atom(Event, A) go:sort(A, Sort)
    if  [Sort == dynamic] then
        go:not(location(Event, _, X, _, _))
    else
        if [Sort == stative] then
            location(Event, _, _, _, _)
        end
    end
;

get_top_level_event(EventId, TopLevelEventId) :-
    parent_event(EventId, ParentEventId)
    if [ParentEventId == `event:root`]  then
        [TopLevelEventId := EventId]
    else
        get_top_level_event(ParentEventId, TopLevelEventId)
    end
;

persist_action(EventId, ParentEventId, Action) :-
    increase_time()
    time(T1)
    go:assert(parent_event(EventId, ParentEventId))
    go:assert(start_time(EventId, T1))

    go:call(Action)

    time(T2)
    go:assert(end_time(EventId, T2))
;

event(EventId) :-
    parent_event(EventId, _)
;
