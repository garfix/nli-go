describe_as_groups(List, GroupsList, Descriptions) :-

    :GroupFeatures := []
    :GroupMembers := []

    /* group elements */
    go:list_foreach(List, E1,
        volume(E1, V)
        color(E1, C)
        form(E1, F)
        :Features := [V, C, F]
        if go:list_index(:GroupFeatures, :Features, Index) {
            go:list_get(:GroupMembers, Index, Group)
            go:list_append(Group, E1, NewGroup)
            go:list_set(:GroupMembers, Index, NewGroup)
        } else {
            go:list_append(:GroupFeatures, :Features, :GroupFeatures)
            go:list_append(:GroupMembers, [E1], :GroupMembers)
        }
    )

    /* describe groups */
    :AGroupList := []
    :Description := none
    go:list_foreach(:GroupMembers, Index, Members,

        go:list_length(Members, MemberCount)
        go:uuid(G, object)
        go:list_append(:AGroupList, G, :AGroupList)

        go:list_get(:GroupFeatures, Index, Features)
        go:list_get(Features, 0, Volume)
        go:list_get(Features, 1, Color)
        go:list_get(Features, 2, Form)

        form(E2, Form) go:count(E2, CountForm)
        color(E2, Color) go:count(E2, CountColor)
        volume(E2, Volume) go:count(E2, CountVolume)

        :Description := { {{ :Description }} description(G) shape(G, Form) }

        if [MemberCount > 1] {
            :Description := { {{ :Description }} number(G, MemberCount) }
        }

        /* Is the shape unique? */
        if [CountForm > 1] {
            :Description := { {{ :Description }} color(G, Color) }
            /* Are the shape and color unique? */
            if [CountColor > 1] {
                :Description := { {{ :Description }} volume(G, Volume) }
            }
        }

    )

    GroupsList := :AGroupList
    Descriptions := :Description
;


/* Create a description for an object in the world */
describe(E1, Sort, DescSet) :-

    form(E1, S)
    color(E1, C)
    volume(E1, V)

    form(E2, S) go:count(E2, Cs)
    color(E2, C) go:count(E2, Cc)
    volume(E2, V) go:count(E2, Cv)

    :Set := { description(E1) default_shape(E1, Sort) shape(E1, S) }

    /* Is the shape unique? */
    if [Cs > 1] {
        :Set := { {{ :Set }} color(E1, C) }
        /* Are the shape and color unique? */
        if [Cc > 1] {
            :Set := { {{ :Set }} volume(E1, V) }
            /* Are the shape, color, and volume unique? */
            if [Cv > 1] {
                /* Add the object it supports and presume that this is enough */
                if support(now, E1, E3) {
                    describe(E3, Sort, E3Desc)
                    :Set := { {{ :Set }} support(now, E1, E3) description(E3) {{ E3Desc }} }
                }
            }
        }
    }

    DescSet := :Set
;

/* Create a description that uses indeterminate nouns in stead of complex refinements */
describe_categoric(E1, Sort, DescSet) :-

    form(E1, S)
    color(E1, C)
    volume(E1, V)

    form(E2, S) go:count(E2, Cs)
    color(E2, C) go:count(E2, Cc)
    volume(E2, V) go:count(E2, Cv)

    :Set := none

    if go:dialog_get_center(L1) [E1 == L1] {
        :Set := { center(E1) }
    } else {
        if name(E1, Name) {
            :Set := { {{ :Set }} name(E1, Name) shape(E1, S) }
        } else {
            :Set := { description(E1) default_shape(E1, Sort) shape(E1, S) }

            /* Is the shape unique? */
            if [Cs > 1] {
                :Set := { {{ :Set }} color(E1, C) }
                /* Are the shape and color unique? */
                if [Cc > 1] {
                    :Set := { {{ :Set }} volume(E1, V) indeterminate(E1) }
                }
            }
        }
    }
    DescSet := :Set
;

describe_event(P1, DescSet) :-
    pick_up(P1, Subject, Object)
    describe_categoric(Object, '', ItemDesc)
    DescSet := { pick_up(P1, Subject, Object) {{ ItemDesc }} }
;

describe_event(P1, DescSet) :-
    put_on(P1, Subject, Object1, Object2)
    describe_categoric(Object1, '', ItemDesc1)
    describe_categoric(Object2, '', ItemDesc2)
    DescSet := { put_on(P1, Subject, Object1, Object2) {{ ItemDesc1 }} {{ ItemDesc2 }} }
;

describe_event(P1, DescSet) :-
    put_in(P1, Subject, Object1, Object2)
    describe_categoric(Object1, '', ItemDesc1)
    describe_categoric(Object2, '', ItemDesc2)
    DescSet := { put_in(P1, Subject, Object1, Object2) {{ ItemDesc1 }} {{ ItemDesc2 }} }
;

describe_event(P1, DescSet) :-
    stack_up(P1, Subject, List)
    go:list_expand(List, Item)
    describe_categoric(Item, '', ItemDesc)
    DescSet := { stack_up(P1, Subject, List) {{ ItemDesc }} }
;

describe_event(P1, DescSet) :-
    get_rid_of(P1, Subject, A)
    describe_categoric(A, '', ItemDesc)
    DescSet := { get_rid_of(P1, Subject, A) {{ ItemDesc }} }
;

describe_event(P1, DescSet) :-
    clear_off(P1, Subject, A)
    describe_categoric(A, '', ItemDesc)
    DescSet := { clear_off(P1, Subject, A) {{ ItemDesc }} }
;
