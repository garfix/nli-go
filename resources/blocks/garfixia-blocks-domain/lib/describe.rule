/* Create a description for an object in the world */
describe(E1, Sort, DescSet) :-

    characteristic_shape(E1, S)
    color(E1, C)
    volume(E1, V)

    shape(E2, S) go:count(E2, Cs)
    color(E2, C) go:count(E2, Cc)
    volume(E2, V) go:count(E2, Cv)

    go:let(Set, description(E1) default_shape(E1, Sort) shape(E1, S) )

    /* Is the shape unique? */
    go:if_then(go:greater_than(Cs, 1),
        go:let(Set, {{ Set }} color(E1, C))
        /* Are the shape and color unique? */
        go:if_then(go:greater_than(Cc, 1),
            go:let(Set, {{ Set }} volume(E1, V))
            /* Are the shape, color, and volume unique? */
            go:if_then(go:greater_than(Cv, 1),
                /* Add the object it supports and presume that this is enough */
                support(E1, E3) describe(E3, Sort, E3Desc)
                go:let(Set, {{ Set }} support(E1, E3) description(E3) {{ E3Desc }})
            )
        )
    )
    go:unify(DescSet, Set)
;

/* Create a description that uses indeterminate nouns in stead of complex refinements */
describe_categoric(E1, Sort, DescSet) :-

    characteristic_shape(E1, S)
    color(E1, C)
    volume(E1, V)

    shape(E2, S) go:count(E2, Cs)
    color(E2, C) go:count(E2, Cc)
    volume(E2, V) go:count(E2, Cv)

    go:if_then_else(go:dialog_get_center(L1) go:log(L1) go:equals(E1, L1),
        go:let(Set, center(E1)),

        go:let(Set, description(E1) default_shape(E1, Sort) shape(E1, S) )

        /* Is the shape unique? */
        go:if_then(go:greater_than(Cs, 1),
            go:let(Set, {{ Set }} color(E1, C))
            /* Are the shape and color unique? */
            go:if_then(go:greater_than(Cc, 1),
                go:let(Set, {{ Set }} volume(E1, V) indeterminate(E1))
            )
        )
    )
    go:unify(DescSet, Set)
;

describe_event(P1, DescSet) :-
    pick_up(P1, Subject, Object)
    describe_categoric(Object, '', ItemDesc)
    go:unify(DescSet, pick_up(P1, Subject, Object) {{ ItemDesc }})
;

describe_event(P1, DescSet) :-
    put_on(P1, Subject, Object1, Object2)
    describe_categoric(Object1, '', ItemDesc1)
    describe_categoric(Object2, '', ItemDesc2)
    go:unify(DescSet, put_on(P1, Subject, Object1, Object2) {{ ItemDesc1 }} {{ ItemDesc2 }})
;

describe_event(P1, DescSet) :-
    put_in(P1, Subject, Object1, Object2)
    describe_categoric(Object1, '', ItemDesc1)
    describe_categoric(Object2, '', ItemDesc2)
    go:unify(DescSet, put_in(P1, Subject, Object1, Object2) {{ ItemDesc1 }} {{ ItemDesc2 }})
;

describe_event(P1, DescSet) :-
    stack_up(P1, Subject, List)
    go:list_expand(List, Item)
    describe_categoric(Item, '', ItemDesc)
    go:unify(DescSet, stack_up(P1, Subject, List) {{ ItemDesc }})
;

describe_event(P1, DescSet) :-
    get_rid_of(P1, Subject, A)
    describe_categoric(A, '', ItemDesc)
    go:unify(DescSet, get_rid_of(P1, Subject, A) {{ ItemDesc }})
;
