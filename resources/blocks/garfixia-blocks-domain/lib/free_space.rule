/*
    Inspired by https://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/

    Finds an area big enough to house an object E1 within the boundaries of Container.
    First it collects all left and right boundaries of all objects in Container, together with the container boundary, and places them in VerLines.
    It does the same for the upper and lower boundaries and places them in HorLines.
    Then it creates a grid from these lines and fills the occupied places with 1.
    To actually determine the free space, it goes through all columns.
    For each column, it calculates the number of columns to the right needed to house the width of E1 (the "span").
    Within the column, for each row, it finds out if the span is free, and accumulates the length of the row.
    Once the accumulated length is big enough for the length of the object E1, the space is found.
*/

/* Returns the lower-left point of a space inside given bounds that is big enough for E1 */
do_find_free_space(Container, E1, X1, Y1) :-
    rectangle(Container, BoundX1, BoundX2, BoundY1, BoundY2)
    do_find_objects(Container, BoundX1, BoundY1, BoundX2, BoundY2, Objects, HorLines, VerLines)
    do_init_grid(fixed, Objects, HorLines, VerLines)
    do_find_free_position(E1, fixed, HorLines, VerLines, X1, Y1)
;

rectangle(R1, X1, X2, Y1, Y2) :-
    at(R1, X1, Y1, _)
    size(R1, Width, Length, _)
    [X2 := [X1 + Width]]
    [Y2 := [Y1 + Length]]
;

do_find_objects(Container, BoundX1, BoundY1, BoundX2, BoundY2, Objects, HorLines, VerLines) :-
    rectangle(O1, X1, X2, Y1, Y2)
    [O1 != Container]
    go:isa(O1, object)
    [X2 >= BoundX1]
    [X1 <= BoundX2]
    [Y2 >= BoundY1]
    [Y1 <= BoundY2]

    [:BoundX1 := BoundX1]
    [:BoundY1 := BoundY1]
    [:BoundX2 := BoundX2]
    [:BoundY2 := BoundY2]

    go:make_list(Objects, O1)
    go:make_list(V1, BoundX1, X1, X2, BoundX2)
    go:make_list(H1, BoundY1, Y1, Y2, BoundY2)
    go:list_deduplicate(V1, V2)
    go:list_deduplicate(H1, H2)
    go:list_sort(V2, V3)
    go:list_sort(H2, H3)

    [:V3 := []]
    go:list_foreach(V3, E1,
        if [E1 >= :BoundX1] then
            if [E1 <= :BoundX2] then
                go:list_append(:V3, E1, :V3)
            end
        end
    )
    [VerLines := :V3]

    [:H3 := []]
    go:list_foreach(H3, E2,
        if [E2 >= :BoundY1] then
            if [E2 <= :BoundY2] then
                go:list_append(:H3, E2, :H3)
            end
        end
    )
    [HorLines := :H3]
;

do_init_grid(Grid, Objects, HorLines, VerLines) :-
    go:retract( grid(Grid, _, _, _) )
    go:list_expand(Objects, O1)
    rectangle(O1, X1, X2, Y1, Y2)
    go:list_index(VerLines, X1, V1)
    go:list_index(VerLines, X2, V2)
    go:list_index(HorLines, Y1, H1)
    go:list_index(HorLines, Y2, H2)
    go:range_foreach(V1, [V2 - 1], V,
        go:range_foreach(H1, [H2 - 1], H,
             go:assert( grid(Grid, H, V, 1) )
        )
    )
;

do_find_free_position(E1, Grid, HorLines, VerLines, ResultX, ResultY) :-
    [:FoundX := -1]
    [:FoundY := -1]
    [:StartY := -1]
    [:MinScore := 100000000]

    at(E1, X1, Y1, _)
    size(E1, Width, Length, _)
    [CenterX := [X1 + [Width / 2]]]
    [CenterY := [Y1 + [Length / 2]]]

    size(E1, Width, Length, _)

    go:list_foreach(VerLines, XIndex, X,
        go:list_get(HorLines, 0, :StartY)
        [XEndIndex := find_span(Width, VerLines, XIndex)]
        go:list_get(VerLines, XEndIndex, EndX)
        go:list_foreach(HorLines, YIndex, Y,
            [YIndex > 0]
            if span_free(XIndex, XEndIndex, [YIndex - 1], Grid) then
                [SpanLength := [Y - :StartY]]
                if [SpanLength >= Length] then
                    [DX := [X - CenterX]]
                    [DY := [:StartY - CenterY]]
                    [Score := [DX + DY]]

                    /* go for the lowest Score */
                    [SpanWidth := [EndX - X]]
                    if [Score < :MinScore] then
                        [:MinScore := Score]
                        [:FoundX := X]
                        [:FoundY := :StartY]
                    end
                end
            else
                [:StartY := Y]
            end
        )
    )

    /* fail if not found */
    [:FoundX != -1]

    [ResultX := :FoundX]
    [ResultY := :FoundY]
;

find_span(Width, VerLines, XIndex) => XEndIndex {
    [X1 := go:list_get(VerLines, XIndex, rv)]
    [XEndIndex := XIndex]
    for Index, X2 in VerLines {
        [W := [X2 - X1]]
        if [W >= Width] {
            [XEndIndex := Index]
            break
        }
    }
};

span_free(ColStart, ColEnd, RowIndex, Grid) :-
    [:Success := true]

    go:range_foreach(ColStart, ColEnd, XIndex,
        if grid(Grid, RowIndex, XIndex, 1) then
            [:Success := false]
            break
        end
    )

    [:Success == true]
;
