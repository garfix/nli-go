/*
 * These rules restrict possible entities by specifying the relations that hold between them.
 */

go:has_sort(object, entity);
go:has_sort(block, object);
go:has_sort(pyramid, object);
go:has_sort(box, object);

hold(P1, E1, E2) :- grasping(E1, E2);
you(E1) :- named(E1, 'SHRDLU');
i(E1) :- named(E1, 'YOU');
tell(P1, P2) :- go:call(P2);
height(E, H) :- size(E, _, _, H);
width(E, W) :- size(E, W, _, _);
top_center(E, X, Y, Z) :-
    at(E, X1, Y1, Z1)
    size(E, Width, Length, Height)
    [Wh := [Width / 2]]
    [Lh := [Length / 2]]
    [X := [X1 + Wh]]
    [Y := [Y1 + Lh]]
    [Z := [Z1 + Height]]
;
big(E) :- size(E, Width, Length, Height) [Width > 128] [Length > 128] [Height > 128];
large(E) :- size(E, Width, Length, Height) [Height > 128];
small(E) :- size(E, Width, Length, Height) [Width < 128] [Length < 128] [Height < 128];
volume(E, V) :- if big(E) then go:unify(V, big) else go:unify(V, small) end;
cubed(E) :- size(E, Width, Width, Width);
taller(A, B) :- height(A, Ha) height(B, Hb) [Ha > Hb];
narrower(A, B) :- width(A, Wa) width(B, Wb) [Wa < Wb];

form(E, Form) :- 
    go:has_sort(E, Sort)
    go:xor(
        [Sort == block] size(E, X, X, X)
        go:unify(Form, cube)
        ,
        go:unify(Form, Sort)
    )
;

behind(A, B) :- at(A, X1, Y1, Z1) at(B, X2, Y2, Z2) [Y1 > Y2];
left_from(now, A, B) :- at(A, X1, Y1, Z1) at(B, X2, Y2, Z2) [X1 < X2] /*go:log('at', A, B, P1)*/;

left_from(P1, A, B) :- 
    location(E1, A, X1, _, _)
    location(E2, B, X2, _, _)
    [X1 < X2]
    start_time(P1, Time)

    start_time(E1, StartE1)
    end_time(E1, EndE1)
    [StartE1 <= Time]
    [EndE1 >= Time]

    start_time(E2, StartE2)
    end_time(E2, EndE2)
    [StartE2 <= Time]
    [EndE2 >= Time]
;

on(A, B) :-
    go:translate('which one', Q)
    go:translate('directly on the surface', A1)
    go:translate('anywhere on top of', A2)
    go:wait_for(
        go:user_select(Q, [A1, A2], Sel))
    if [Sel == 0] then
        support(now, B, A)
    else
        anywhere_on(A, B)
    end
;

anywhere_on(A, B) :- support(now, B, A);
anywhere_on(A, B) :- support(now, C, A) anywhere_on(C, B);


/* historical support event */
support(P1, A, B) :-
    [P1 != now]
    location(P1, A, _, _, _)
    start_time(P1, Start)
    check_on_top_of_at_time(A, B, Start)
;
