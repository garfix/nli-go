/*
 * These rules restrict possible entities by specifying the relations that hold between them.
 */

object(E1) :- block(E1);
object(E1) :- pyramid(E1);
object(E1) :- box(E1);
hold(P1, E1, E2) :- grasping(E1, E2);
you(E1) :- named(E1, 'SHRDLU');
i(E1) :- named(E1, 'YOU');
tell(P1, P2) :- go:call(P2);
height(E, H) :- size(E, _, _, H);
width(E, W) :- size(E, W, _, _);
top_center(E, X, Y, Z) :- at(E, X1, Y1, Z1) size(E, Width, Length, Height) go:divide(Width, 2, Wh) go:divide(Length, 2, Lh)
    go:add(X1, Wh, X) go:add(Y1, Lh, Y) go:add(Z1, Height, Z);
big(E) :- size(E, Width, Length, Height) [Width > 128] [Length > 128] [Height > 128];
large(E) :- size(E, Width, Length, Height) [Height > 128];
small(E) :- size(E, Width, Length, Height) [Width < 128] [Length < 128] [Height < 128];
volume(E, V) :- if big(E) then go:unify(V, big) else go:unify(V, small) end;
cube(E) :- block(E) size(E, Width, Length, Height) [Width == Length] [Length == Height];
taller(A, B) :- height(A, Ha) height(B, Hb) [Ha > Hb];
narrower(A, B) :- width(A, Wa) width(B, Wb) [Wa < Wb];

characteristic_shape(E, S) :-
    type(E, T)
    if [T == block] size(E, X, X, X) then
        [S = cube]
    else
        [S = T]
    end
;

shape(E, S) :- type(E, S);
shape(E, S) :- type(E, block) size(E, X, X, X) go:unify(S, cube);

behind(A, B) :- at(A, X1, Y1, Z1) at(B, X2, Y2, Z2) [Y1 > Y2];

on(A, B) :-
    go:slot(locale, Locale)
    go:translate('which one', Locale, Q)
    go:translate('directly on the surface', Locale, A1)
    go:translate('anywhere on top of', Locale, A2)
    go:wait_for(
        go:user_select(Q, [A1, A2], Sel))
    if [Sel == 0] then
        support(B, A)
    else
        anywhere_on(A, B)
    end
;

anywhere_on(A, B) :- support(B, A);
anywhere_on(A, B) :- support(C, A) anywhere_on(C, B);

