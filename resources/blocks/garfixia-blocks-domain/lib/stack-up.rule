/*
 * Algorithm for stacking up objects
 */

create_plan_for_stack(QBlocks, SortedList) :-
    go:quant_ordered_list(QBlocks, &by_easiness, List)
    go:list_order(List, &by_size, SortedList)
    go:list_length(SortedList, Size)
    go:subtract(Size, 1, Last)
    go:list_foreach(SortedList, Index, E1,
        if go:not_equals(Index, Last) go:not(block(E1)) then
            go:cancel()
        end
    );

stack_up_proper(ParentEventId, List1, X, Y) :-
    go:let(Base, `table:table`)
    go:list_foreach(List1, E1,
        do_cleartop(ParentEventId, E1)
        if go:equals(Base, `table:table`) then
            block(E1) do_put_on_table(ParentEventId, E1, X, Y)
        else
            block(Base)
            go:unify(B1, Base)
            do_put_on_center(ParentEventId, E1, B1)
            do_let_go(ParentEventId)
        end
        go:let(Base, E1)
    );

by_easiness(E1, E2, R) :-
    if pyramid(E1) then
        if pyramid(E2) then go:unify(R, 0) else go:unify(R, 1) end
    else
        if pyramid(E2) then
            go:unify(R, -1)
        else
            if cleartop(E1) then
                if cleartop(E2) then go:unify(R, 0) else go:unify(R, -1) end
            else
                if cleartop(E2) then go:unify(R, 1) else go:unify(R, 0) end
            end
        end
    end
;

/* Order decreasingly by width or depth */
by_size(E1, E2, R) :-
    if pyramid(E1) then
        go:unify(R, 1)
    else
        if pyramid(E2) then
            go:unify(R, -1)
        else
            size(E1, Width1, Depth1, _)
            size(E2, Width2, Depth2, _)
            if go:equals(Width1, Width2) then
                go:compare(Depth2, Depth1, R)
            else
                if go:equals(Depth1, Depth2) then
                    go:compare(Width2, Width1, R)
                else
                    go:min(Width1, Depth1, Min1) go:min(Width2, Depth2, Min2) go:compare(Min2, Min1, R)
                end
            end
        end
    end
;
