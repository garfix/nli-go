/*
 * Algorithm for stacking up objects
 */

create_plan_for_stack(QBlocks, SortedList) :-
    go:quant_ordered_list(QBlocks, &by_easiness, List)
    go:list_order(List, &by_size, SortedList)
    go:list_length(SortedList, Size)
    [Last := [Size - 1]]
    go:list_foreach(SortedList, Index, E1,
        if [Index != Last] go:not(basic_type(E1, block)) then
            cancel
        end
    );

stack_up_proper(ParentEventId, List1, X, Y) :-
    [:Base := `table:table`]
    go:list_foreach(List1, E1,
        if [:Base == `table:table`] then
            basic_type(E, block) do_put_on_table(ParentEventId, E1, X, Y)
        else
            basic_type(:Base, block)
            [B1 := :Base]
            do_put_on_center(ParentEventId, E1, B1)
            do_let_go(ParentEventId)
        end
        [:Base := E1]
    )
;

by_easiness(E1, E2, R) :-
    if basic_type(E1, pyramid) then
        if basic_type(E2, pyramid) then [R := 0] else [R := 1] end
    else
        if basic_type(E2, pyramid) then
            [R := -1]
        else
            if cleartop(E1) then
                if cleartop(E2) then [R := 0] else [R := -1] end
            else
                if cleartop(E2) then [R := 1] else [R := 0] end
            end
        end
    end
;

/* Order decreasingly by width or depth */
by_size(E1, E2, R) :-
    if basic_type(E1, pyramid) then
        [R := 1]
    else
        if basic_type(E2, pyramid) then
            [R := -1]
        else
            size(E1, Width1, Depth1, _)
            size(E2, Width2, Depth2, _)
            if [Width1 == Width2] then
                go:compare(Depth2, Depth1, R)
            else
                if [Depth1 == Depth2] then
                    go:compare(Width2, Width1, R)
                else
                    go:min(Width1, Depth1, Min1) go:min(Width2, Depth2, Min2) go:compare(Min2, Min1, R)
                end
            end
        end
    end
;
