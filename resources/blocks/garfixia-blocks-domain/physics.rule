/*

Physics rules

Enforces "physics" rules: it updates the object-object relations and object properties that should change when an object is moved.

*/

phys_move_hand(X, Y, Z) :-
    go:not(grasping(`:shrdlu`, _))
    at(`hand:hand`, X1, Y1, Z1)
    phys_move_hand_partial(X1, Y1, 600)
    phys_move_hand_partial(X, Y, 600)
    phys_move_hand_partial(X, Y, Z)
;

phys_move_hand_partial(X, Y, Z) :-
    go:uuid(Uuid, event)
    go:wait_for(
        action_move_to(Uuid, `hand:hand`, X, Y, Z)
    )
    db_hand(X, Y, Z)
;

phys_move_hand(X, Y, Z) :-
    grasping(`:shrdlu`, E1)
    at(`hand:hand`, X1, Y1, Z1)
    phys_move_hand_with_object(E1, X1, Y1, 600)
    phys_move_hand_with_object(E1, X, Y, 600)
    phys_move_hand_with_object(E1, X, Y, Z)
;

phys_move_hand_with_object(E1, X, Y, Z) :-
    top_center_to_bottom_corner(E1, X, Y, Z, X1, Y1, Z1)
    go:uuid(Uuid, event)
    go:wait_for(
        action_move_to(Uuid, `hand:hand`, X, Y, Z)
        action_move_to(Uuid, E1, X1, Y1, Z1)
    )
    phys_move_object(E1, X1, Y1, Z1)
    db_hand(X, Y, Z)
;

phys_grasp(E1) :- db_grasp(E1);
phys_release(E1) :- db_release(E1);

phys_raise_hand(_) :-
    at(`hand:hand`, X, Y, Z)
    phys_move_hand(X, Y, 600);

phys_move_object(E1, X, Y, Z) :-
    increase_time()

    time(T1)
    go:uuid(EventId, event)
    go:log('touch', EventId)
    go:assert(touch(EventId, `:shrdlu`, E1))
    go:assert(start_time(EventId, T1))
    go:assert(end_time(EventId, T1))

    db_object(E1, X, Y, Z)
    go:ignore(phys_remove_support_relations(E1))
    go:ignore(phys_create_support_relations(E1))
    go:ignore(phys_remove_contain_relations(E1))
    go:ignore(phys_create_contain_relations(E1))
;

phys_remove_support_relations(E1) :-
    support(E2, E1)
    db_unsupport(E2, E1)
    db_cleartop(E2);

phys_create_support_relations(E1) :-
    at(E1, Left1, Front1, Bottom1)
    at(E2, Left2, Front2, Bottom2)
    size(E2, Width2, Length2, Height2)
    [Top2 := [Bottom2 + Height2]]
    [Top2 == Bottom1]                       /* main check, as early as possible */
    size(E1, Width1, Length1, Height1)
    [Left2 <= [Left1 + Width1]]
    [[Left2 + Width2] >= Left1]
    [Front2 <= [Front1 + Length1]]
    [[Front2 + Length2] >= Front1]
    db_support(E2, E1)
    db_uncleartop(E2)
;

phys_remove_contain_relations(E1) :-
    db_uncontain(_, E1);

phys_create_contain_relations(E1) :-
    at(E1, Left1, Front1, Bottom1)
    basic_type(E2, box)
    at(E2, Left2, Front2, Bottom2)
    [Bottom2 == Bottom1]                       /* main check, as early as possible */
    size(E1, Width1, Length1, Height1)
    size(E2, Width2, Length2, Height2)
    [Right1 := [Left1 + Width1]]
    [Back1 := [Front1 + Length1]]
    [Right2 := [Left2 + Width2]]
    [Back2 := [Front2 + Length2]]
    [Left2 <= Left1]
    [Right2 >= Right1]
    [Front2 <= Front1]
    [Back2 >= Back1]
    db_contain(E2, E1)
;