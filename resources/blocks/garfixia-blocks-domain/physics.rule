/*

Physics rules

Enforces "physics" rules: it updates the object-object relations and object properties that should change when an object is moved.

*/

high_enough_for_hand(Z) :-
    /* max top of all objects (except the hand and the object it's holding) */
    at(E1, _, _, Bottom1)
    go:not([E1 == `hand:hand`])
    if grasping(`:shrdlu`, G) {
        go:not([E1 == G])
    }
    size(E1, _, _, Height1)
    [Top1 := [Bottom1 + Height1]]
    go:largest(Top1)
    go:first()

    /* add the height of the carrying object */
    [:MaxTop := Top1]
    if grasping(`:shrdlu`, E) {
        size(E, _, _, Height)
        [:MaxTop := [Top1 + Height]]
    }

    [Z := [:MaxTop + 10]]
;

phys_move_hand(X, Y, Z) :-
    go:not(grasping(`:shrdlu`, _))
    high_enough_for_hand(Max)
    at(`hand:hand`, X1, Y1, Z1)
    phys_move_hand_partial(X1, Y1, Max)
    phys_move_hand_partial(X, Y, Max)
    phys_move_hand_partial(X, Y, Z)
;

phys_move_hand_partial(X, Y, Z) :-
    go:wait_for('move_to', _, [[`hand:hand`, X, Y, Z]])
    db_hand(X, Y, Z)
;

phys_move_hand(X, Y, Z) :-
    grasping(`:shrdlu`, E1)
    high_enough_for_hand(Max)
    at(`hand:hand`, X1, Y1, Z1)
    phys_move_hand_with_object(E1, X1, Y1, Max)
    phys_move_hand_with_object(E1, X, Y, Max)
    phys_move_hand_with_object(E1, X, Y, Z)
;

phys_move_hand_with_object(E1, X, Y, Z) :-
    top_center_to_bottom_corner(E1, X, Y, Z, X1, Y1, Z1)
    go:wait_for('move_to', _, [
        [`hand:hand`, X, Y, Z],
        [E1, X1, Y1, Z1]
    ])
    phys_move_object(E1, X1, Y1, Z1)
    db_hand(X, Y, Z)
;

phys_move_just_object(E1, X, Y, Z) :-
    go:wait_for('move_to', _, [
        [E1, X, Y, Z]
    ])
    phys_move_object(E1, X, Y, Z)
;

phys_grasp(E1) :- db_grasp(E1);
phys_release(E1) :- db_release(E1);

phys_raise_hand(_) :-
    at(`hand:hand`, X, Y, Z)
    high_enough_for_hand(Max)
    phys_move_hand(X, Y, Max);

phys_move_object(E1, X, Y, Z) :-
    time(T1)
    go:uuid(EventId, event)
    go:assert(touch(EventId, `:shrdlu`, E1))
    go:assert(start_time(EventId, T1))
    go:assert(end_time(EventId, T1))

    db_object(E1, X, Y, Z)

    /* fix the end of the previously current location event */
    location(PrevEvent, E1, _, _, _)
    end_time(PrevEvent, 1000000)
    go:retract(end_time(PrevEvent, 1000000))
    go:assert(end_time(PrevEvent, T1))

    go:uuid(EventId2, event)
    go:assert(location(EventId2, E1, X, Y, Z))
    go:assert(start_time(EventId2, T1))
    go:assert(end_time(EventId2, 1000000))

    go:ignore(phys_remove_support_relations(E1))
    go:ignore(phys_create_support_relations(E1))
    go:ignore(phys_remove_contain_relations(E1))
    go:ignore(phys_create_contain_relations(E1))
;

phys_remove_support_relations(E1) :-
    support(now, E2, E1)
    db_unsupport(E2, E1)
    db_cleartop(E2)
;

check_on_top_of_at_time(E1, E2, Time) :-

    location(P2, E2, Left2, Bottom2, Height2)
    start_time(P2, Start2)
    end_time(P2, End2)
    [Start2 <= Time]
    [End2 >= Time]
    location(P1, E1, Left1, Bottom1, Height1)
    start_time(P1, Start1)
    end_time(P1, End1)
    [Start1 <= Time]
    [End1 >= Time]

    size(E2, Width2, Length2, Height2)
    [Top2 := [Bottom2 + Height2]]
    [Top2 == Bottom1]                       /* main check, as early as possible */
    size(E1, Width1, Length1, Height1)
    [Left2 <= [Left1 + Width1]]
    [[Left2 + Width2] >= Left1]
    [Front2 <= [Front1 + Length1]]
    [[Front2 + Length2] >= Front1]
;

check_on_top_of(E1, E2) :-
    at(E1, Left1, Front1, Bottom1)
    at(E2, Left2, Front2, Bottom2)
    size(E2, Width2, Length2, Height2)
    [Top2 := [Bottom2 + Height2]]
    [Top2 == Bottom1]                       /* main check, as early as possible */
    size(E1, Width1, Length1, Height1)
    [Left2 <= [Left1 + Width1]]
    [[Left2 + Width2] >= Left1]
    [Front2 <= [Front1 + Length1]]
    [[Front2 + Length2] >= Front1]
;

phys_create_support_relations(E1) :-
    check_on_top_of(E1, E2)
    db_support(E2, E1)
    db_uncleartop(E2)
;

phys_remove_contain_relations(E1) :-
    db_uncontain(_, E1);

phys_create_contain_relations(E1) :-
    at(E1, Left1, Front1, Bottom1)
    go:has_sort(E2, box)
    at(E2, Left2, Front2, Bottom2)
    [Bottom2 == Bottom1]                       /* main check, as early as possible */
    size(E1, Width1, Length1, Height1)
    size(E2, Width2, Length2, Height2)
    [Right1 := [Left1 + Width1]]
    [Back1 := [Front1 + Length1]]
    [Right2 := [Left2 + Width2]]
    [Back2 := [Front2 + Length2]]
    [Left2 <= Left1]
    [Right2 >= Right1]
    [Front2 <= Front1]
    [Back2 >= Back1]
    db_contain(E2, E1)
;