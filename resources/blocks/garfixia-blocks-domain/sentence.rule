/* these commands need to be robust; they must clear up any previous state of holding a block */

/* make sure the following relations stay in tact */
/* contain() support() cleartop() at() */

/* after making sure you can, pick up an object and hold it in the hand */
do_pick_up_smart(P1, E1) :-
    do_clear_hand(_)
    do_cleartop(E1)
    do_pick_up(E1);

do_put_in_smart(P1, E1, E2) :-
    do_clear_hand(_)
    do_cleartop(E1)
    do_put_in(E1, E2);

do_stack_up_smart(P1, QBlocks) :-
    do_clear_hand(_)
    go:quant_ordered_list(QBlocks, &by_easiness, List)
    go:list_order(List, &by_size, SortedList)
    go:list_get(List, 0, BaseBlock)
    do_find_space_on_table(BaseBlock, X, Y)
    stack_up_proper(SortedList, X, Y);

stack_up_proper(List1, X, Y) :-
    go:list_foreach(List1, E1,
        do_cleartop(E1)
        go:if_then_else(
            at(Base, X, Y, _) cleartop(Base), /* find the topmost object on the stack */
            block(Base)
            do_put_on(E1, Base),
            block(E1) do_put_on_table(E1, X, Y)
        )
    );

by_easiness(E1, E2, R) :-
    go:if_then_else(
        pyramid(E1),
        go:if_then_else( pyramid(E2), go:unify(R, 0), go:unify(R, 1) ),
        go:if_then_else( pyramid(E2), go:unify(R, -1),
            go:if_then_else( cleartop(E1),
                go:if_then_else( cleartop(E2), go:unify(R, 0), go:unify(R, -1) ),
                go:if_then_else( cleartop(E2), go:unify(R, 1), go:unify(R, 0) ) )
        )
    );

/* Order decreasingly by width or depth */
by_size(E1, E2, R) :-
    size(E1, Width1, Depth1, _)
    size(E2, Width2, Depth2, _)
    go:if_then_else(
        go:equals(Width1, Width2),
        go:compare(Depth2, Depth1, R),
        go:if_then_else(
            go:equals(Depth1, Depth2),
            go:compare(Width2, Width1, R),
            go:min(Width1, Depth1, Min1) go:min(Width2, Depth2, Min2) go:compare(Min2, Min1, R)
        )
    );

/* Create a description for an object in the world */
describe(E1, DescSet) :-

    /* Is the shape unique? */
    shape(E1, S)
    go:if_then_else(
        shape(E2, S) go:number_of(E2, 1),
        go:unify(DescSet, description(E1) shape(E1, S)),

        /* Is the combination of shape and color unique? */
        color(E1, C)
        go:if_then_else(
            shape(E2, S) color(E2, C) go:number_of(E2, 1),
            go:unify(DescSet, description(E1) shape(E1, S) color(E1, C)),

            /* Is the combination of shape, color and volume (big, small) unique? */
            volume(E1, V)
            go:if_then_else(
                shape(E2, S) color(E2, C) volume(E2, V) go:number_of(E2, 1),
                go:unify(DescSet, description(E1) shape(E1, S) color(E1, C) volume(E1, V)),

                /* Add the object it supports and presume that this is enough */
                support(_, E1, E3) describe(E3, E3Desc)
                go:unify(DescSet,
                    description(E1) shape(E1, S) color(E1, C) volume(E1, V)
                    support(_, E1, E3)
                    description(E3) {{ E3Desc }})
            )
        )
    );


/* Create a general description for an object in the world */
describe_categoric(E1, DescSet) :-

    /* Is the shape unique? */
    shape(E1, S)
    go:if_then_else(
        shape(E2, S) go:number_of(E2, 1),
        go:unify(DescSet, description(E1) shape(E1, S)),

        /* Is the combination of shape and color unique? */
        color(E1, C)
        go:if_then_else(
            shape(E2, S) color(E2, C) go:number_of(E2, 1),
            go:unify(DescSet, description(E1) shape(E1, S) color(E1, C)),

            /* Is the combination of shape, color and volume (big, small) unique? */
            volume(E1, V)
            go:unify(DescSet, description(E1) shape(E1, S) color(E1, C) volume(E1, V))
        )
    );
