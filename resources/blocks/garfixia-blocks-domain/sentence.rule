/*
 * These commands are robust:
 * - the hand is made empty
 * - objects on top of the objects in focus are removed
 *
 * The command is not executed immediately; a plan may be made, but the actual execution is performed by a new goal.
 *
 * These commands create top level events.
 */

/* pick up E1 and hold it in your hand */
do_pick_up_smart(EventId, E1) :-
    go:create_goal(
        'robot',
        persist_action(EventId, `event:root`,
            go:assert(pick_up(EventId, `:shrdlu`, E1))

            do_clear_hand(EventId)
            do_cleartop(EventId, E1)
            do_pick_up(EventId, E1)
        )
    );

do_put_down_smart(EventId, E1) :-
    go:create_goal(
        'robot',
        persist_action(EventId, `event:root`,
            go:assert(put_down(EventId, `:shrdlu`, E1))

            if go:not(grasping(`:shrdlu`, E1)) then
                do_clear_hand(EventId)
                do_cleartop(EventId, E1)
                do_pick_up(EventId, E1)
            end

            do_find_space_on_table(E1, X, Y)
            do_move_to_table(EventId, E1, X, Y)
        )
    );

do_drop_smart(EventId, E1) :-
    go:create_goal(
        'robot',
        persist_action(EventId, `event:root`,
            go:assert(put_down(EventId, `:shrdlu`, E1))

            if go:not(grasping(`:shrdlu`, E1)) then
                do_clear_hand(EventId)
                do_cleartop(EventId, E1)
                do_pick_up(EventId, E1)
            end

            do_find_space_on_table(E1, X, Y)
            high_enough_for_hand(Max)
            phys_move_hand(X, Y, Max)
            phys_release(E1)
            phys_move_just_object(E1, X, Y, 0)
        )
    );

/* pick up E1 and put it in E2 */
do_put_in_smart(E1, E2) :-
    go:create_goal(
        'robot',
        go:uuid(EventId, event)
        persist_action(EventId, `event:root`,
            /*go:log('put in', EventId)*/
            go:assert(put_in(EventId, `:shrdlu`, E1, E2))

            if go:not(grasping(`:shrdlu`, E1)) then
                do_clear_hand(EventId)
                do_cleartop(EventId, E1)
            end
            do_put_in(EventId, E1, E2)
        )
    );

/* pick up E1 and put it on E2 */
do_put_on_smart(E1, E2) :-
    go:create_goal(
        'robot',
        go:uuid(EventId, event)
        persist_action(EventId, `event:root`,
            /*go:log('put on', EventId)*/
            go:assert(put_on_smart(EventId, `:shrdlu`, E1, E2))

            if go:not(grasping(`:shrdlu`, E1)) then
                do_clear_hand(EventId)
                do_cleartop(EventId, E1)
            end

            do_put_on(EventId, E1, E2)
        )
    );

/* pick up QBlocks, plan a proper stack, and build it */
do_stack_up_smart(QBlocks) :-
    create_plan_for_stack(QBlocks, SortedList)
    go:list_get(SortedList, 0, BaseBlock)
    go:create_goal(
        'robot',
        go:uuid(EventId, event)
        persist_action(EventId, `event:root`,
            /*go:log('stack up', EventId)*/

            go:assert(stack_up(EventId, `:shrdlu`, SortedList))

            do_clear_hand(EventId)
            do_cleartop(EventId, BaseBlock)

            do_find_space_on_table(BaseBlock, X, Y)
            stack_up_proper(EventId, SortedList, X, Y)
        )
    );

do_build(Object) :-
    go:unify(Object, go:quant(A, B, C))
    go:unify(C, go:isa(Stack, stack) stack_spec(Stack, Spec))
    do_stack_up_smart(Spec)
;

/* A stack is identified by an object on the table that supports another object */
go:isa(E1, stack) :-
    support(_, `table:table`, E1)
    support(_, E1, _)
;

stack_spec(Stack, Spec) :-
    anywhere_on(Object, Stack)
    go:make_list(List, Stack, Object)
    go:quant_match(Spec, List)
;

drop(P1, Person, E1) :-
    /* did not occur */
    [1 == 2]
;
