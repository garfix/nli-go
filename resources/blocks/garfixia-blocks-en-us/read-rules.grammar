/* quantifier phrases */

{ rule: qp(Result) -> quantifier(Result, Range),                            sense: go:quantifier(Result, Range, $quantifier) }


/* imperative vps, which are linked to action predicates */

{ rule: vp_imperative(P1) -> 'find' np(E1),                                       sense: go:do($np, none) }
{ rule: vp_imperative(P1) -> 'pick' 'up' np(E1),                                  sense: go:do($np1, dom:do_pick_up_smart(E1)) }
{ rule: vp_imperative(P1) -> 'grasp' np(E1),                                      sense: go:do($np1, dom:do_pick_up_smart(E1)) }
{ rule: vp_imperative(P1) -> 'put' np(E1) 'into' np(E2),                          sense: go:do($np1, go:do($np2, dom:do_put_in_smart(E1, E2))) }
{ rule: vp_imperative(P1) -> 'put' np(E1) 'in' np(E2),                            sense: go:do($np1, go:do($np2, dom:do_put_in_smart(E1, E2))) }
{ rule: vp_imperative(P1) -> 'put' np(E1) 'onto' np(E2),                          sense: go:do($np1, go:do($np2, dom:do_put_on_smart(E1, E2))) }
{ rule: vp_imperative(P1) -> 'put' np(E1) 'on' 'top' 'of' np(E2),                 sense: go:do($np1, go:do($np2, dom:do_put_on_smart(E1, E2))) }
{ rule: vp_imperative(P1) -> 'put' np(E1) 'on' np(E2),                            sense: go:do($np1, go:do($np2, dom:do_put_on_smart(E1, E2))) }
{ rule: vp_imperative(P1) -> 'stack' 'up' np(E1),                                 sense: dom:do_stack_up_smart($np) }
{ rule: vp_imperative(P1) -> 'build' np(E1),                                      sense: dom:do_build($np) }


/* verb phrases: subject, verb, object ... */

{ rule: vp(P1) -> np(E3) 'put' np(E1) 'on' np(E2),                              sense: go:check($np1, go:check($np2, go:check($np3, dom:put_on(P1, E3, E1, E2)))),   tag: go:sort(P1, dynamic) }
{ rule: vp(P1) -> np(E1) 'pick' np(E2) 'up',                                    sense: go:check($np1, go:check($np2, dom:pick_up(P1, E1, E2))),   tag: go:sort(P1, dynamic) }

{ rule: vp(P1) -> aux_do(_) vp(P1) }
{ rule: vp(P1) -> np(E1) aux_do(_) event_ref(P1),                               sense: go:check($np, $event_ref) }
{ rule: vp(P1) -> np(E1) aux_be(_) 'doing' event_ref(P1),                       sense: go:check($np, $event_ref) }
{ rule: vp(P1) -> np(E1) past_participle(P1, E2, E1) 'by' np(E2),               sense: go:check($np2, go:check($np1, $past_participle)) }
{ rule: vp(P1) -> np(E1) tv_infinitive(P1, E1, E2) np(E2),                      sense: go:check($np1, go:check($np2, $tv_infinitive))  }
{ rule: vp(P1) -> np(E2) 'be' past_participle(P1, E1, E2) 'by' np(E1),          sense: go:check($np1, go:check($np2, $past_participle)) }
{ rule: vp(P1) -> np(E1) tv(P1, E1, E2) np(E2),                                 sense: go:check($np1, go:check($np2, $tv)) }

{ rule: vp(P1) -> np(E1) start(P1, E1, P1) 'to' vp_without_np(P1, E1),          sense: go:check($np1, $vp_without_np) }

/* long-distance dependencies; category vp/np */

{ rule: vp_without_np(P1, E1) -> aux_be(_) tv_gerund(P1, E1, E2) np(E2),                   sense: go:check($np, $tv_gerund) }
{ rule: vp_without_np(P1, E1) -> copula(C1) pp(P1, E1),                                        sense: $pp }
{ rule: vp_without_np(P1, E2) -> aux_do(_) np(E1) tv_infinitive(P1, E1, E2),               sense: go:check($np, $tv_infinitive) }
{ rule: vp_without_np(P1, E2) -> aux_be(_) np(E1) past_participle(P1, E2, E1) 'by',        sense: go:check($np, $past_participle) }
{ rule: vp_without_np(P1, E1) -> 'clean' np(E2) 'off',                                     sense: go:check($np, dom:clear_off(P1, E1, E2)) }


{ rule: vp_without_nps(P1, E1, E2) -> 'to' tv_infinitive(P1, E1, E2) }

{
    /* "... I told you to pick up" */
    rule: vp_without_np(P1, L1) -> np(E1) meta_verb(P1, E1, E2, P2) np(E2) vp_without_nps(P2, E2, L1),
    sense: go:check($np1, go:check($np2, go:apply($meta_verb, $vp_without_nps)))
}

/* relations */

{ rule: adjp(E1) -> 'taller' 'than' np(E2),                            sense: go:check($np, dom:taller(E1, E2)) }
{ rule: adjp(E1) -> 'as' 'wide' 'as' np(E2),                           sense: go:check($np, dom:as_wide_as(E1, E2)) }
{ rule: adjp(E1) -> 'bigger' 'than' np(E2),                            sense: go:check($np, dom:bigger(E1, E2)) }
{ rule: adjp(E1) -> 'behind' np(E2),                                   sense: go:check($np, dom:behind(E1, E2)) }
{ rule: adjp(E1) -> 'narrower' 'than' np(E2),                          sense: go:check($np, dom:narrower(E1, E2)) }
{ rule: adjp(E1) -> adjective(E1) }
{ rule: adjp(E1) -> 'not' adjp(E1),                                    sense: go:not($adjp) }


/* prepositional phrases */

{ rule: pp(P1, E1) -> 'not' pp(P1, E1),                                    sense: go:not($pp) }
{ rule: pp(P1, E1) -> 'in' np(E2),                                         sense: go:check($np, dom:contain(_, E2, E1)) }
{ rule: pp(P1, E1) -> 'on' np(E2),                                         sense: go:check($np, dom:on(E1, E2)) }
{ rule: pp(P1, E1) -> 'on' 'top' 'of' np(E2),                              sense: go:check($np, dom:on_top_of(E1, E2)) }
{ rule: pp(P1, E1) -> 'to' 'the' 'left' 'of' np(E2),                       sense: go:check($np, dom:left_from(P1, E1, E2)) }


/* relative clauses */

{ rule: relative_clause(E1) -> 'which' copula(C1) adjp(E1) }
{ rule: relative_clause(E1) -> relative_clause(E1) 'but' copula(C1) adjp(E1), sense: $relative_clause $adjp }
{ rule: relative_clause(E1) -> np(E2) aux_be(A1) tv_gerund(P1, E2, E1), sense: go:check($np, $tv_gerund) }
{ rule: relative_clause(E1) -> 'which' vp_without_np(P1, E1) }
{ rule: relative_clause(E1) -> 'which' tv(P1, E1, E2) np(E2),          sense: go:check($np, $tv)  }
{ rule: relative_clause(E1) -> 'that' tv(P1, E1, E2) np(E2),           sense: go:check($np, $tv)  }


/* noun phrases */

{ rule: np(E1) -> qp(_) nbar(E1),                                      sense: go:quant($qp, E1, $nbar) }
{ rule: np(E1) -> 'the' nbar(E1),                                      sense: go:quant(none, E1, $nbar), tag: go:reference(E1, entity) }
{ rule: np(E1) -> 'that' nbar(E1),                                     sense: go:quant(none, E1, $nbar), tag: go:reference(E1, entity) }
{ rule: np(E1) -> nbar(E1),                                            sense: go:quant(none, E1, $nbar) }
{ rule: np(E1) -> pronoun(E1),                                         sense: go:quant(some, E1, $pronoun) }
{ rule: np(E1) -> poss_pronoun(E1),                                    sense: go:quant(some, E1, $poss_pronoun) }
{ rule: np(E1) -> np(E1) 'and' np(E2),                                 sense: go:and($np1, $np2) }
{ rule: np(E1) -> 'either' np(E1) 'or' np(E2),                         sense: go:or($np1, $np2) }
{ rule: np(E1) -> 'one',                                               sense: go:quant(one, E1, go:reference_slot(E1)) }

{ rule: nbar(E1) -> nbar(E1) pp(P1, E1) }
{ rule: nbar(E1) -> adjp(E1) nbar(E1) }
{ rule: nbar(E1) -> noun(E1) relative_clause(E1) }
{ rule: nbar(E1) -> noun(E1) }
{ rule: nbar(E1) -> 'them',                                            tag: go:labeled_reference(E1, 'them', entity) }
{ rule: nbar(E1) -> superlative(E1) nbar(E1),                          sense: $nbar $superlative }

{ rule: nbar(E1) -> 'stack' 'which' 'contains' np(E2),                 sense: go:isa(E1, stack) dom:stack_spec(E1, $np) }

/* superlatives */

{ rule: superlative(E1) -> super(E1),                                  sense: $super go:count(E1, N) [N > 1] go:first() }

