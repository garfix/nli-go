/* quantifiers */

{ rule: qp(_) -> quantifier(Result, Range),                            sense: go:quantifier(Result, Range, $quantifier) }
{ rule: quantifier(Result, Range) -> 'all',                            sense: go:equals(Result, Range) }
{ rule: quantifier(Result, Range) -> an(_),                            sense: go:greater_than(Result, 0) }
{ rule: quantifier(Result, Range) -> 'any',                            sense: go:greater_than(Result, 0) }
{ rule: quantifier(Result, Range) -> 'at' 'least' 'one' 'of',          sense: go:greater_than(Result, 0) }
{ rule: quantifier(Result, Range) -> 'both' 'of' 'the',                sense: go:equals(Result, 2) }
{ rule: quantifier(Result, Range) -> number(N1),                       sense: go:equals(Result, N1) }
{ rule: quantifier(Result, Range) -> 'two',                            sense: go:equals(Result, 2) }

{ rule: number(N1) -> /^[0-9]+/ }

{ rule: an(E1) -> 'a' }
{ rule: an(E1) -> 'an' }

/* verbs */

{ rule: tv(P1, E1, E2) -> 'pick' 'up',                                 sense: dom:do_pick_up_smart(P1, E2) }
{ rule: tv(P1, E1, E2) -> 'grasp',                                     sense: dom:do_pick_up_smart(P1, E2) }
{ rule: tv(P1, E1, E2) -> 'find' }
{ rule: tv(P1, E1, E2) -> 'own',                                       sense: learn:own(E1, E2) }
{ rule: tv(P1, E1, E2) -> 'support',                                   sense: dom:support(E1, E2) }
{ rule: tv(P1, E1, E2) -> 'supports',                                  sense: dom:support(E1, E2) }
{ rule: tv_gerund(P1, E1, E2) -> 'holding',                            sense: dom:hold(P1, E1, E2) }
{ rule: tv_gerund(P1, E1, E2) -> 'sitting' 'on',                       sense: dom:support(E2, E1) }
{ rule: tv_infinitive(P1, E1, E2) -> 'pick' 'up',                      sense: dom:pick_up(P1, E1, E2) }
{ rule: tv_infinitive(P1, E1, E2) -> 'support',                        sense: dom:support(E1, E2) }
{ rule: tv_infinitive(P1, E1, E2) -> 'contain',                        sense: dom:contain(P1, E1, E2) }
{ rule: past_participle(P1, E1, E2) -> 'touched',                      sense: dom:touch(P1, E1, E2) }
{ rule: past_participle(P1, E2, E1) -> 'supported',                    sense: dom:support(E2, E1) }

/* imperatives */
{ rule: vp(P1) -> 'put' np(E1) 'into' np(E2),                          sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:do_put_in_smart(P1, E1, E2))) }
{ rule: vp(P1) -> 'put' np(E1) 'in' np(E2),                            sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:do_put_in_smart(P1, E1, E2))) }
{ rule: vp(P1) -> 'put' np(E1) 'onto' np(E2),                          sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:do_put_on_smart(P1, E1, E2))) }
{ rule: vp(P1) -> 'put' np(E1) 'on' 'top' 'of' np(E2),                 sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:do_put_on_smart(P1, E1, E2))) }
{ rule: vp(P1) -> 'put' np(E1) 'on' np(E2),                            sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:do_put_on_smart(P1, E1, E2))) }
{ rule: vp(P1) -> 'stack' 'up' np(E1),                                 sense: dom:do_stack_up_smart(P1, $np) }

/* past events */
{ rule: mem_vp(P1) -> 'put' np(E1) 'on' np(E2),                        sense: go:quant_foreach($np1, go:quant_foreach($np2, dom:put_on(P1, E1, E2))) }
{ rule: mem_vp(P1) -> np(E1) mem_vp(P1),                                           sense: go:quant_check($np, $mem_vp) }

{ rule: vp(P1) -> tv(P1, _, E1) np(E1),                                sense: go:quant_foreach($np, $tv) }
{ rule: vp(P1) -> np(E1) past_participle(P1, E2, E1) 'by' np(E2),      sense: go:quant_check($np2, go:quant_check($np1, $past_participle)) }
{ rule: vp(P1, E1) -> np(E2) 'to' tv_infinitive(P1, E2, E1),           sense: go:quant_check($np, $tv_infinitive) }
{ rule: vp(P1, E1, E2) -> np(E1) tv_infinitive(P1, E1, E2) np(E2),     sense: go:quant_check($np1, go:quant_check($np2, $tv_infinitive))  }
{ rule: vp(P1, E1, E2) -> np(E2) 'be' past_participle(P1, E1, E2) 'by' np(E1), sense: go:quant_check($np1, go:quant_check($np2, $past_participle)) }
{ rule: vp(P1, E1) -> np(E1) aux_be(_) tv_gerund(P1, E1, E2) np(E2),   sense: go:quant_check($np1, go:quant_check($np2, $tv_gerund)) }
{ rule: vp(P1) -> np(E1) tv(P1, E1, E2) np(E2),                        sense: go:quant_check($np1, go:quant_check($np2, $tv)) }
{ rule: vp(P1, E1) -> np(E1) copula(C1) pp(E1),                        sense: go:quant_check($np, $pp) }
{ rule: vp(P1, E2) -> aux_do(A1) np(E1) tv_infinitive(P1, E1, E2),      sense: go:quant_check($np, $tv_infinitive) }
{ rule: vp(P1, E2) -> aux_be(A1) np(E1) past_participle(P1, E2, E1) 'by',  sense: go:quant_check($np, $past_participle) }

/* long-distance dependencies */
{ rule: vp_dep(P1, L1) -> np(E1) tell(P1) vp(P2, L1),                  sense: go:quant_check($np, dom:tell(P1, $vp)) }

{ rule: dont(P1) -> 'don' '\'' 't' }

{ rule: copula(C1) -> 'is' }
{ rule: copula(C1) -> 'are' }

{ rule: aux_be(A1) -> 'is'}
{ rule: aux_be(A1) -> 'are' }

{ rule: aux_do(A1) -> 'does' }
{ rule: aux_do(A1) -> 'do' }

{ rule: aux_have(A1) -> 'had' }
{ rule: aux_have(A1) -> 'have' }

{ rule: tell(P1) -> 'told' }
{ rule: contain(P1) -> 'contain' }
{ rule: can(P1) -> 'can' }

/* nouns */

{ rule: adjp(E1) -> 'taller' 'than' np(E2),                            sense: go:quant_check($np, dom:taller(E1, E2)) }
{ rule: adjp(E1) -> 'behind' np(E2),                                   sense: go:quant_check($np, dom:behind(E1, E2)) }
{ rule: adjp(E1) -> 'narrower' 'than' np(E2),                          sense: go:quant_check($np, dom:narrower(E1, E2)) }
{ rule: adjp(E1) -> adjective(E1) }
{ rule: adjp(E1) -> 'not' adjective(E1),                               sense: go:not($adjective) }

{ rule: adjective(E1) -> 'red',                                        sense: dom:red(E1) }
{ rule: adjective(E1) -> 'blue',                                       sense: dom:blue(E1) }
{ rule: adjective(E1) -> 'green',                                      sense: dom:green(E1) }
{ rule: adjective(E1) -> 'big',                                        sense: dom:big(E1) }
{ rule: adjective(E1) -> 'small',                                      sense: dom:small(E1) }
{ rule: adjective(E1) -> 'little',                                     sense: dom:small(E1) }
{ rule: adjective(E1) -> 'large',                                      sense: dom:large(E1) }

{ rule: pp(E1) -> 'not' pp(E1),                                        sense: go:not($pp) }
{ rule: pp(E1) -> 'in' np(E2),                                         sense: go:quant_check($np, dom:contain(_, E2, E1)) }
{ rule: pp(E1) -> 'on' 'top' 'of' np(E2),                              sense: go:quant_check($np, dom:on(E1, E2)) }

{ rule: relative_clause(E1) -> 'which' copula(C1) adjp(E1) }
{ rule: relative_clause(E1) -> np(E2) aux_be(A1) tv_gerund(P1, E2, E1), sense: go:quant_check($np, $tv_gerund) }
{ rule: relative_clause(E1) -> 'which' vp_dep(P1, E1) }
{ rule: relative_clause(E1) -> 'which' tv(P1, E1, E2) np(E2),          sense: go:quant_check($np, $tv)  }

{ rule: np(E1) -> qp(_) nbar(E1),                                      sense: go:quant($qp, E1, $nbar) }
{ rule: np(E1) -> 'the' nbar(E1),                                    sense: go:quant(some, E1, go:definite_reference(E1, $nbar)) }
{ rule: np(E1) -> nbar(E1),                                            sense: go:quant(none, E1, $nbar) }
{ rule: np(E1) -> pronoun(E1),                                         sense: go:quant(some, E1, $pronoun) }
{ rule: np(E1) -> poss_pronoun(E1),                                    sense: go:quant(some, E1, $poss_pronoun) }
{ rule: np(E1) -> np(E1) 'and' np(E1),                                 sense: go:and($np1, $np2) }
{ rule: np(E1) -> 'either' np(E1) 'or' np(E1),                         sense: go:or($np1, $np2) }

{ rule: nbar(E1) -> nbar(E1) pp(E1) }
{ rule: nbar(E1) -> adjp(E1) nbar(E1) }
{ rule: nbar(E1) -> noun(E1) relative_clause(E1) }
{ rule: nbar(E1) -> noun(E1) }
{ rule: nbar(E1) -> 'them',                                            sense: go:back_reference(E1, none) }

{ rule: nbar(E1) -> superlative(E1) nbar(E1),                          sense: $nbar $superlative }

{ rule: superlative(E1) -> super(E1),                                  sense: $super go:count(E1, N) go:greater_than(N, 1) go:first() }

{ rule: noun(E1) -> 'one',                                             sense: go:sortal_back_reference(E1) }
{ rule: noun(E1) -> 'anything',                                        sense: dom:object(E1) }
{ rule: noun(E1) -> 'thing',                                           sense: dom:object(E1) }
{ rule: noun(E1) -> 'things',                                          sense: dom:object(E1) }
{ rule: noun(E1) -> 'object',                                          sense: dom:object(E1) }
{ rule: noun(E1) -> 'objects',                                         sense: dom:object(E1) }
{ rule: noun(E1) -> 'block',                                           sense: dom:block(E1) }
{ rule: noun(E1) -> 'blocks',                                          sense: dom:block(E1) }
{ rule: noun(E1) -> 'cube',                                            sense: dom:cube(E1) }
{ rule: noun(E1) -> 'cubes',                                           sense: dom:cube(E1) }
{ rule: noun(E1) -> 'pyramid',                                         sense: dom:pyramid(E1) }
{ rule: noun(E1) -> 'pyramids',                                        sense: dom:pyramid(E1) }
{ rule: noun(E1) -> 'table',                                           sense: dom:table(E1) }
{ rule: noun(E1) -> 'box',                                             sense: dom:box(E1) }

{ rule: pronoun(E1) -> 'you',                                          sense: dom:you(E1) }
{ rule: pronoun(E1) -> 'i',                                            sense: dom:i(E1) }
{ rule: pronoun(E1) -> 'it',                                           sense: go:back_reference(E1, none) }

{ rule: poss_pronoun(E1) -> 'mine',                                    sense: dom:i(E1) }

/* Conjunction */

{ rule: and(C1) -> 'and' }

/* Declaration */

{ rule: assertion(P1) -> np(E1) copula(_) np(E2),                      sense: go:assert(
                                                                            learn:own(A, B) :-
                                                                                go:quant_check($np1, go:quant_check($np2, go:equals(A, E2) go:equals(B, E1)))) }
{ rule: assertion(P1) -> np(E1) dont(_) tv(P1, A, B) np(E2),           sense: go:assert(
                                                                            -$tv :- go:quant_check($np1, go:quant_check($np2, go:equals(A, E1) go:equals(B, E2)))) }
{ rule: default_rule(P1) -> np(E1) tv(P1, A, B) np(E2),                sense: go:assert(
                                                                            $tv :- go:quant_check($np1,
                                                                                go:quant_check($np2, go:equals(A, E1) go:equals(B, E2) go:not( -$tv )))) }

{ rule: exception(P1) -> 'but' assertion(P1) }
{ rule: exception(P1) -> ',' exception(P1) }
{ rule: default_rule(P1) -> assertion(P1) }

/* Sentences */

{ rule: declarative(P1) -> default_rule(P1) }
{ rule: declarative(P1) -> default_rule(P1) exception(P2) }

{ rule: time_modifier(P1, P2) -> 'before' mem_vp(P2),                              sense: $mem_vp dom:before(P1, P2) }

{ rule: interrogative_clause(P1) -> 'what' vp(P1, E1),                            sense: go:intent(what, E1) }
{ rule: interrogative_clause(P1) -> 'which' vp(P1, E1),                            sense: go:intent(which, E1) $vp }
{ rule: interrogative_clause(P1) -> 'how' 'many' vp(P1, E1),                       sense: go:intent(how_many, E1) }
{ rule: interrogative_clause(P1) -> copula(_) np(E1) adjp(E1),                     sense: go:intent(select, E1) go:quant_check($np, $adjp) }
{ rule: interrogative_clause(P1) -> copula(_) 'there' np(E1) adjp(E1),             sense: go:intent(select_categoric, E1) go:quant_check($np, $adjp) }
{ rule: interrogative_clause(P1) -> copula(_) np(E1) pp(E1),                       sense: go:intent(yes_no) go:quant_check($np, $pp) }
{ rule: interrogative_clause(P1) -> aux_be(_) vp(_),                               sense: go:intent(yes_no) }
{ rule: interrogative_clause(P1) -> copula(_) np(E1) past_participle(P1, E2, E1),  sense: go:intent(select_subject, E2) go:quant_check($np, $past_participle) }
{ rule: interrogative_clause(P1) -> can(_) vp(P1, E1, E2),                         sense: go:intent(yes_no) }
{ rule: interrogative_clause(P1) -> aux_do(_) vp(P1),                              sense: go:intent(yes_no) }

/* history based */
{ rule: interrogative_clause(P1) -> aux_have(_) np(E1) past_participle(P1, E1, E2) np(E2) time_modifier(P1, P2),
                                                                                   sense: go:intent(select, E2)
                                                                                           go:quant_check($np1,
                                                                                                go:quant_check($np2, $past_participle $time_modifier)) }

{ rule: interrogative(P1) -> interrogative_clause(P1) '?' }

{ rule: imperative_clause(P1) -> vp(P1) }
{ rule: imperative_clause(C) -> imperative_clause(P1) and(_) imperative_clause(P2), sense: $imperative_clause1 $imperative_clause2 }

{ rule: imperative(P1) -> imperative_clause(P1) '.' }
{ rule: imperative(P1) -> 'will' 'you' 'please' imperative_clause(P1) '?' }
{ rule: imperative(P1) -> imperative_clause(P1) }

{ rule: s(S1) -> declarative(S1),                                       sense: go:intent(declaration) }
{ rule: s(S1) -> imperative(S1),                                        sense: go:intent(command) }
{ rule: s(S1) -> interrogative(S1),                                     sense: go:intent(question) }
