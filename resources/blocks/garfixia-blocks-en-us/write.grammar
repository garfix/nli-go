{ rule: s(E1) -> np(E1),                                                    condition: dom:root(E1) dom:description(E1) }

{ rule: s(P1) -> 'while' vp(P1),                                            condition: dom:time_description(P1) }
{ rule: s(P1) -> 'to' vp(P1),                                               condition: dom:cause_description(P1) }

{ rule: vp(P1) -> np(Subject) 'was' 'stacking' 'up' list(List),             condition: dom:stack_up(P1, Subject, List) }
{ rule: vp(P1) -> 'get' 'rid' 'of' np(A),                                   condition: dom:get_rid_of(P1, Subject, A) }
{ rule: vp(P1) -> 'clean' 'off' np(A),                                      condition: dom:clear_off(P1, Subject, A) }

{ rule: np(E1) -> 'it',                                                     condition: dom:center(E1) }
{ rule: np(E1) -> np(E1) 'which' 'supports' np(E2),                         condition: dom:support(E1, E2) }
{ rule: np(E1) -> qp(E1) nbar(E1),                                          condition: dom:description(E1) }
{ rule: qp(E1) -> 'a',                                                      condition: dom:indeterminate(E1) }
{ rule: qp(E1) -> 'the' }

{ rule: np(E1) -> 'I',                                                      condition: [E1 == `:shrdlu`] }

{ rule: nbar(E1) -> volume(E1) nbar(E1),                                    condition: dom:volume(E1, V) }
{ rule: nbar(E1) -> color(E1) nbar(E1),                                     condition: dom:color(E1, C) }
{ rule: nbar(E1) -> noun(E1) }

{ rule: noun(E1) -> 'one',                                                  condition: dom:root(E1) }
{ rule: noun(E1) -> 'one',                                                  condition: dom:shape(E1, S) dom:default_shape(E1, S) }
{ rule: noun(E1) -> 'pyramid',                                              condition: dom:shape(E1, pyramid) }
{ rule: noun(E1) -> 'block',                                                condition: dom:shape(E1, block) }
{ rule: noun(E1) -> 'cube',                                                 condition: dom:shape(E1, cube) }
{ rule: noun(E1) -> 'box',                                                  condition: dom:shape(E1, box) }
{ rule: noun(E1) -> 'table',                                                condition: dom:shape(E1, table) }

{ rule: color(E1) -> 'red',                                                 condition: dom:color(E1, red) }
{ rule: color(E1) -> 'green',                                               condition: dom:color(E1, green) }
{ rule: color(E1) -> 'blue',                                                condition: dom:color(E1, blue) }

{ rule: volume(E1) -> 'large',                                              condition: dom:volume(E1, big) }
{ rule: volume(E1) -> 'small',                                              condition: dom:volume(E1, small) }

{ rule: s(S1) -> boolean(S1),                                               condition: dom:result(S1) }
{ rule: boolean(B1) -> 'yes',                                               condition: dom:result(true) }
{ rule: boolean(B1) -> 'no',                                                condition: dom:result(false) }

{ rule: s(N) -> named_number(N) 'of' 'them',                                condition: dom:a_number(N) [N < 11] }
{ rule: s(N) -> text(N) 'of' 'them',                                        condition: dom:a_number(N) }

{ rule: s(S1) -> list(S1),                                                  condition: dom:list(S1) }

{ rule: s(S1) -> 'yes' ',' list(S1),                                    condition: dom:select(S1, 1)  }
{ rule: s(S1) -> 'yes' ',' describe_amount(Count) list(S1),             condition: dom:select(S1, Count)  }
{ rule: s(S1) -> 'yes' ',' 'by' list(S1),                               condition: dom:select_subject(S1) }
{ rule: s(S1) -> 'none',                                                    condition: dom:none() }

{ rule: describe_amount(C) -> 'two' 'things' ':',                           condition: dom:select(_, 2) }
{ rule: describe_amount(C) -> named_number(C) 'of' 'them' ':' }

{ rule: s(S1) -> 'I understand',                                            condition: dom:understand() }
{ rule: s(S1) -> 'I don\'t understand',                                     condition: dom:dont_understand() }
{ rule: s(S1) -> 'I don\'t know',                                           condition: dom:dont_know() }

{ rule: list(L1) -> np(Head) ',' list(Tail),                                condition: go:list_length(L1, Len) [Len > 2]
                                                                                go:list_head(L1, Head, Tail) }
{ rule: list(L1) -> np(First) 'and' np(Second),                            condition: go:list_length(L1, Len) [Len == 2]
                                                                                go:list_get(L1, 0, First) go:list_get(L1, 1, Second) }
{ rule: list(L1) -> np(First),                                             condition: go:list_get(L1, 0, First) }

{ rule: named_number(1) -> 'one' }
{ rule: named_number(2) -> 'two' }
{ rule: named_number(3) -> 'three' }
{ rule: named_number(4) -> 'four' }
{ rule: named_number(5) -> 'five' }
{ rule: named_number(6) -> 'six' }
{ rule: named_number(7) -> 'seven' }
{ rule: named_number(8) -> 'eight' }
{ rule: named_number(9) -> 'nine' }
{ rule: named_number(10) -> 'ten' }
