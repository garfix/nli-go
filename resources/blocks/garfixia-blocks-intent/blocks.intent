/* Any command */
{
    condition: go:intent(command),
    responses:
        {
            condition: go:exists(),
            answer: go:canned('OK')
        }
        {
            answer: go:canned('I can\'t')
        }
}

/* What? */
{
    condition: go:intent(what, B),
    responses:
        {
            condition: go:exists(),
            preparation: N := dom:describe(B, '') go:make_list(List, B),
            answer: dom:list(List) {{ N }},
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* Which? */
{
    condition: go:intent(which, A),
    responses:
        {
            condition: go:exists(),
            preparation: go:has_sort(A, Sort) Desc := dom:describe(A, Sort),
            answer: dom:root(A) {{ Desc }},
            result: A
        }
        {
            answer: dom:dont_know()
        }
}

/* How many? */
{
    condition: go:intent(how_many, E1),
    responses:
        {
            condition: go:exists(),
            preparation: go:count(E1, N),
            answer: dom:a_number(N),
            result: E1
        }
        {
            answer: dom:none()
        }
}

/* Is one? */
{
    condition: go:intent(select, B),
    responses:
        {
            condition: go:exists() go:atom(B, Ba) go:category(Ba, definiteness, definite),
            answer: dom:result(true),
            result: B
        }
        {
            condition: go:exists(),
            preparation: go:has_sort(B, Sort) N := dom:describe(B, Sort) go:count(B, Count) go:make_list(List, B),
            answer: dom:select(List, Count) {{ N }},
            result: B
        }
        {
            answer: dom:none()
        }
}

/* Is there? */
{
    condition: go:intent(select_categoric, B) go:isa(B, ExpectedSort),
    responses:
        {
            condition: go:exists(),
            preparation: N := dom:describe_categoric(B, ExpectedSort) go:count(B, Count) go:make_list(List, B),
            answer: dom:select(List, Count) {{ N }} dom:expected(ExpectedSort),
            result: B
        }
        {
            answer: dom:result(false)
        }
}

/* Is supported? Yes, by ... */
{
    condition: go:intent(select_subject, B),
    responses:
        {
            condition: go:exists(),
            preparation: N := dom:describe(B, '') go:make_list(List, B),
            answer: dom:select_subject(List) {{ N }},
            result: B
        }
        {
            answer: dom:none()
        }
}

/* Do I own? Yes: these things */
{
    condition: go:intent(yes_no) learn:own(_, B) go:isa(B, object),
    responses:
        {
            condition: go:exists(),
            preparation: N := dom:describe(B, '') go:count(B, Count) go:make_list(List, B),
            answer: dom:select(List, Count) {{ N }},
            result: B
        }
        {
            answer: dom:result(false)
        }
}

{
    condition: go:intent(yes_no),
    responses:
        {
            condition: go:exists(),
            answer: dom:result(true)
        }
        {
            answer: dom:result(false)
        }
}

{
    condition: go:intent(declaration),
    responses:
        {
            condition: go:exists(),
            answer: dom:understand()
        }
        {
            answer: dom:dont_understand()
        }
}

/* When? */
{
    condition: go:intent(when, P1),
    responses:
        {
            condition: go:exists(),
            preparation: dom:get_top_level_event(P1, TopId) dom:describe_event(TopId, Desc),
            answer: dom:time_description(TopId) {{ Desc }},
            result: P1
        }
        {
            answer: dom:dont_know()
        }
}

/* Why? */
{
    condition: go:intent(why, P1),
    responses:
        {
            condition: go:exists(),
            preparation:
                dom:parent_event(P1, ParentEventId)
                if [ParentEventId == `event:root`] {
                    CenterId := P1
                    Desc := { dom:you_asked_me_to(CenterId) }
                } else {
                    CenterId := ParentEventId
                    dom:describe_event(CenterId, Desc)
                },
            answer:  dom:cause_description(CenterId) {{ Desc }},
            result: ParentEventId
        }
        {
            answer: dom:no_event()
        }
}

/* How? */
{
    condition: go:intent(how, P1),
    responses:
        {
            condition: go:exists(),
            preparation:
                dom:parent_event(SubGoalId, P1)
                dom:describe_event(SubGoalId, Desc)
                go:make_list(List, SubGoalId)
            ,
            answer: dom:how_description(List) {{ Desc }}
        }
        {
            answer: dom:dont_know()
        }
}

/* There were 5 blocks */
{
    condition: go:intent(quantity, E1, Count),
    responses:
        {
            condition: go:count(E1, Number) [Number == Count],
            answer: dom:agree()
        }
        {
            preparation: go:count(E1, Number) go:make_list(List, E1) GroupsList, Descriptions := dom:describe_as_groups(List),
            answer: dom:incorrect_number(Number, GroupsList) {{ Descriptions }}
        }
}

{
    condition: go:intent(possible),
    responses:
        {
            condition: go:exists(),
            answer: dom:result(true)
        }
        {
            answer: dom:dont_know()
        }
}

{
    condition: go:intent(thanks),
    responses:
        {
            answer: dom:acknowledge_thanks()
        }
}
