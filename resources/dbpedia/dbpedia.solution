[
    /* Who married X? */
    {
        condition: intent(who, A) marry(_, A, B),
        result: A,
        responses: [
            {
                condition: exists(),
                preparation: gender(B, G) name(A, N, canonical_name),
                answer: gender(B, G) name(A, N) make_and(A, R) married_to(R, B)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* Was X married to Y? */
    {
        condition: intent(yes_no) marry(_, A, B),
        result: _,
        responses: [
            {
                condition: exists(),
                answer: result(true)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* How many children had X? (counting the children) */
    {
        condition: intent(how_many, B) have_child(A, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: gender(A, Gender) number_of(B, Number),
                answer: gender(A, Gender) have_child(A, C) count(C, Number)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* How many? */
    {
        condition: intent(how_many, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: number_of(B, Number),
                answer: canned(Number)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* How many children had X? (using a number-of-children attribute) */
    {
        condition: intent(how_many, B) have_child(A, B),
        transformations: [
            have_child(A, B) :- have_n_children(A, Number);
        ],
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: gender(A, Gender),
                answer: gender(A, Gender) have_child(A, C) count(C, Number)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* Who was X's father? */
    {
        condition: intent(who, B) has_father(A, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: gender(A, Gender) name(B, N, canonical_name),
                answer: gender(A, Gender) name(B, N) has_father(A, B)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* Who was X's mother? */
    {
        condition: intent(who, B) has_mother(A, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: gender(A, Gender) name(B, N, canonical_name),
                answer: gender(A, Gender) name(B, N) has_mother(A, B)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* When was X born? */
    {
        condition: intent(when, P1) bear(P1, A, B),
        transformations: [
            bear(P1, A, B) :- birth_date(B, Ymd);
        ],
        result: _,
        responses: [
            {
                condition: exists(),
                preparation: gender(B, Gender) split(Ymd, '-', Year, Month, Day),
                answer: gender(B, Gender) birth_date(B, D) date(D, Day, Month, Year)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* When did X die? */
    {
        condition: intent(when, P1) die(P1, A),
        transformations: [
            die(P1, A) :- death_date(A, Ymd);
        ],
        result: _,
        responses: [
            {
                condition: exists(),
                preparation: gender(A, Gender) split(Ymd, '-', Year, Month, Day),
                answer: gender(A, Gender) death_date(A, D) date(D, Day, Month, Year)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* When? */
    {
        condition: intent(when, Ymd),
        result: _,
        responses: [
            {
                condition: exists(),
                preparation: split(Ymd, '-', Year, Month, Day),
                answer: date(D, Day, Month, Year) root(D)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* Who is the husband of X? */
    /* Who is the wife of X? */
    {
        condition: intent(who, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: name(B, N, canonical_name),
                answer: name(B, N) make_and(B, R) root(R)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* Who is X? */
    {
        condition: intent(describe, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: long_description(B, D),
                answer: canned(D)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* What is the population of X? */
    {
        condition: intent(what, B) has_population(E1, B),
        result: _,
        responses: [
            {
                condition: exists(),
                answer: canned(B)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* What is the capital of X? */
    {
        condition: intent(what, B),
        result: B,
        responses: [
            {
                condition: exists(),
                preparation: label(B, L),
                answer: canned(L)
            }
            {
                answer: dont_know()
            }
        ]
    }

    /* How old is X? */
    {
        condition: intent(how_old, E1),
        transformations: [
            intent(how_old, E1) :- birth_date(E1, BirthDate) date_today(Today) date_subtract_years(Today, BirthDate, YearsSinceBirth);
        ],
        result: _,
        responses: [
            {
                condition: death_date(E1, DeathDate) date_subtract_years(DeathDate, Today, YearsSinceDeath) less_than(YearsSinceDeath, 0),
                preparation: gender(E1, Gender) date_subtract_years(DeathDate, BirthDate, Age) split(BirthDate, '-', Year1, Month1, Day1) split(DeathDate, '-', Year2, Month2, Day2),
                answer: report_age_deceased(E1, Age, BirthDate, DeathDate) gender(E1, Gender) date(BirthDate, Day1, Month1, Year1) date(DeathDate, Day2, Month2, Year2)
            }
            {
                condition: exists(),
                preparation: gender(E1, Gender) split(BirthDate, '-', Year, Month, Day),
                answer: report_age_alive(E1, YearsSinceBirth, BirthDate) gender(E1, Gender) date(BirthDate, Day, Month, Year)
            }
            {
                answer: dont_know()
            }
        ]
    }
]