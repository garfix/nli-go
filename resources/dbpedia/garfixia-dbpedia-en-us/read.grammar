/* noun */

{ rule: proper_noun_group(N1) -> proper_noun(N1) proper_noun(N1) proper_noun(N1) }
{ rule: proper_noun_group(N1) -> proper_noun(N1) proper_noun(N1) }
{ rule: proper_noun_group(N1) -> proper_noun(N1) }

{ rule: np(E1) -> 'the' nbar(E1),                                     sense: go:quant(some, E1, $nbar) } /* definite reference? */
{ rule: np(E1) -> np_poss(E1),                                        sense: go:quant(some, E1, $np_poss) } /* definite reference? */
{ rule: np(E1) -> proper_noun_group(E1),                              sense: go:quant(go:quantifier(Result, Range, go:equals(Result, Range)), E1, none) }
{ rule: np(E1) -> 'she',                                              sense: go:quant(
                                                                        go:quantifier(Result, Range, go:equals(Result, 1)),
                                                                        E1, go:back_reference(E1, dom:gender(E1, female))) }
{ rule: np(E1) -> 'he',                                               sense: go:quant(
                                                                        go:quantifier(Result, Range, go:equals(Result, 1)),
                                                                        E1, go:back_reference(E1, dom:gender(E1, male))) }


{ rule: nbar(E1) -> 'largest' aggregation(E1, Q1),                    sense: go:order(Q1, asc) go:last() }
{ rule: nbar(E1) -> number(N1) 'largest' aggregation(E1, Q1),         sense: go:order(Q1, asc) go:last(N1) }
{ rule: nbar(E1) -> ordinal(N1) 'largest' aggregation(E1, Q1),        sense: go:order(Q1, desc) go:subtract(N1, 1, I1) go:get(I1) }

{ rule: aggregation(E1, Q1) -> nbar(E1) 'by' 'area',                  sense: dom:land_area(E1, Q1) }
{ rule: aggregation(E1, Q1) -> nbar(E1) 'by' 'population',            sense: dom:has_population(E1, Q1) }

{ rule: nbar(E1) -> noun(E1) }
{ rule: nbar(E2) -> 'state' 'of' np(E1),                              sense: go:quant_check($np, dom:has_state(E1, E2)) }
{ rule: nbar(E2) -> 'states' 'of' np(E1),                             sense: go:quant_check($np, dom:has_state(E1, E2)) }
{ rule: nbar(E2) -> 'capital' 'of' np(E1),                            sense: go:quant_check($np, dom:has_capital(E1, E2)) }
{ rule: nbar(E2) -> 'population' 'of' np(E1),                         sense: go:quant_check($np, dom:has_population(E1, E2)) }

/* son of X */
{ rule: nbar(E1) -> relation(E2, E1) 'of' np(E2),                     sense: go:quant_check($np, $relation) }
/* X's son */
{ rule: np_poss(E1) -> np(E2) possessive_marker(_) relation(E2, E1),  sense: go:quant_check($np, $relation) }

{ rule: relation(E1, E2) -> 'largest' aggregation(E1, E2, Q1),              sense: go:order(Q1, asc) go:last() }
{ rule: relation(E1, E2) -> number(N1) 'largest' aggregation(E1, E2, Q1),   sense: go:order(Q1, asc) go:last(N1) }
{ rule: relation(E1, E2) -> ordinal(N1) 'largest' aggregation(E1, E2, Q1),  sense: go:order(Q1, desc) go:subtract(N1, 1, I1) go:get(I1) }

{ rule: aggregation(E1, E2, Q1) -> relation(E1, E2) 'by' 'area',      sense: dom:land_area(E2, Q1) }
{ rule: aggregation(E1, E2, Q1) -> relation(E1, E2) 'by' 'population',sense: dom:has_population(E2, Q1) }

{ rule: relation(E1, E2) -> 'state',                                  sense: dom:has_state(E1, E2) }
{ rule: relation(E1, E2) -> 'daughter',                               sense: dom:has_daughter(E1, E2) }
{ rule: relation(E1, E2) -> 'son',                                    sense: dom:has_son(E1, E2) }
{ rule: relation(E1, E2) -> 'wife',                                   sense: dom:has_wife(E1, E2) }
{ rule: relation(E1, E2) -> 'husband',                                sense: dom:has_husband(E1, E2) }
{ rule: relation(E1, E2) -> 'father',                                 sense: dom:has_father(E1, E2) }
{ rule: relation(E1, E2) -> 'mother',                                 sense: dom:has_mother(E1, E2) }

{ rule: child(E1) -> 'children' }
{ rule: birthday(E1) -> 'birthday' }
{ rule: country(E1) -> 'countries',                                   sense: dom:country(E1) }

/* verb */

{ rule: die(P1) -> 'die' }
{ rule: marry(P1) -> 'married' }
{ rule: bear(P1) -> 'born' }

{ rule: have(P1) -> 'have' }
{ rule: have(P1) -> 'had' }
{ rule: have(P1) -> 'has' }

{ rule: copula(P1) -> 'is' }
{ rule: copula(P1) -> 'are' }
{ rule: copula(P1) -> 'was' }
{ rule: copula(P1) -> 'were' }

{ rule: aux_be(P1) -> 'is' }
{ rule: aux_be(P1) -> 'was' }
{ rule: aux_do(P1) -> 'did' }

/* misc */

{ rule: number(N1) -> /^[0-9]+/ }
{ rule: number(N1) -> 'two',                                            sense: go:unify(N1, 2) }
{ rule: number(N1) -> 'three',                                          sense: go:unify(N1, 3) }
{ rule: ordinal(N1) -> 'second',                                        sense: go:unify(N1, 2) }
{ rule: ordinal(N1) -> 'third',                                         sense: go:unify(N1, 3) }

{ rule: possessive_marker(P) -> '\'' 's' }

{ rule: pp(E1) -> 'above' number(N1),                                   sense: go:greater_than(E1, N1) }

/* sentence */

{ rule: np_comp(E1) -> marry(P1) np(E2),                                sense: go:quant_check($np, dom:marry(P1, E1, E2)) }
{ rule: np_comp(E1) -> marry(P1) 'to' np(E2),                           sense: go:quant_check($np, dom:marry(P1, E1, E2)) }

{ rule: np_comp2(E1) -> child(E1) have(_) np(E2),                        sense: go:quant_check($np, dom:have_child(E2, E1)) }
{ rule: np_comp2(E1) -> country(E1) have(_) 'population' pp(E2),         sense: dom:has_population(E1, E2) $pp }

{ rule: np_comp3(P1) -> aux_be(_) np(E1) bear(P1),                       sense: go:quant_check($np, dom:bear(P1, _, E1)) }
{ rule: np_comp3(Ymd) -> aux_be(_) np(E1) possessive_marker(_) birthday(Ymd),   sense: go:quant_check($np, dom:birth_date(E1, Ymd)) }
{ rule: np_comp3(P1) -> aux_do(_) np(E1) die(P1),                        sense: go:quant_check($np, dom:die(P1, E1)) }

{ rule: np_comp4(P1) -> np(E1) marry(P1) 'to' np(E2),                    sense: go:quant_check($np1, go:quant_check($np2, dom:marry(P1, E1, E2))) }

{ rule: interrogative(P1) -> 'who' np_comp(E1),                         sense: go:intent(who, E1) }
{ rule: interrogative(P1) -> 'who' copula(_) proper_noun_group(E1),     sense: go:intent(describe, E1) dom:person(E1) }
{ rule: interrogative(P1) -> 'what' copula(_) 'the' 'name' 'of' np(E1), sense: go:quant_check($np, go:intent(who, E1)) }
{ rule: interrogative(P1) -> 'who' copula(_) np(E1),                    sense: go:quant_check($np, go:intent(who, E1) dom:person(E1)) }
{ rule: interrogative(P1) -> 'what' copula(_) np(E1),                   sense: go:quant_check($np, go:intent(what, E1)) }
{ rule: interrogative(P1) -> 'when' np_comp3(P1),                       sense: go:intent(when, P1) }
{ rule: interrogative(P1) -> 'how' 'many' np_comp2(E1),                 sense: go:intent(how_many, E1) }
{ rule: interrogative(P1) -> 'how' 'old' copula(_) np(E1),              sense: go:quant_check($np, go:intent(how_old, E1)) dom:person(E1) }
{ rule: interrogative(P1) -> aux_be(P1) np_comp4(P1),                   sense: go:intent(yes_no) }

{ rule: interrogative(S1) -> interrogative(S1) '?' }
{ rule: s(S1) -> interrogative(S1),                                     sense: go:intent(question) }
