/* Who married X? */
{
    condition: go:intent(who, A) dom:marry(_, A, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(B, G) dom:name(A, N, canonical_name) go:unify(A, C) go:make_list(List, C),
            answer: dom:gender(B, G) dom:name(A, N) dom:married_to(List, B),
            result: A
        }
        {
            answer: dom:dont_know()
        }
}

/* Was X married to Y? */
{
    condition: go:intent(yes_no) dom:marry(_, A, B),
    responses:
        {
            condition: go:exists(),
            answer: dom:result(true)
        }
        {
            answer: dom:dont_know()
        }
}

/* How many children had X? */
{
    condition: go:intent(how_many, B) dom:have_child(A, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(A, Gender) go:count(B, Number),
            answer: dom:gender(A, Gender) dom:have_child(A, C) go:count(C, Number),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* How many? */
{
    condition: go:intent(how_many, B),
    responses:
        {
            condition: go:exists(),
            preparation: go:count(B, Number),
            answer: go:canned(Number),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* Who was X's father? */
{
    condition: go:intent(who, B) dom:has_father(A, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(A, Gender) dom:name(B, N, canonical_name),
            answer: dom:gender(A, Gender) dom:name(B, N) dom:has_father(A, B),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* Who was X's mother? */
{
    condition: go:intent(who, B) dom:has_mother(A, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(A, Gender) dom:name(B, N, canonical_name),
            answer: dom:gender(A, Gender) dom:name(B, N) dom:has_mother(A, B),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* When was X born? */
{
    condition: go:intent(when, P1) dom:born(P1, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(B, Gender) dom:birth_date(B, Ymd) go:split(Ymd, '-', Year, Month, Day),
            answer: dom:gender(B, Gender) dom:birth_date(B, D) dom:date(D, Day, Month, Year)
        }
        {
            answer: dom:dont_know()
        }
}

/* When did X die? */
{
    condition: go:intent(when, P1) dom:die(P1, A),
    responses:
        {
            condition: go:exists(),
            preparation: dom:gender(A, Gender) dom:death_date(A, Ymd) go:split(Ymd, '-', Year, Month, Day),
            answer: dom:gender(A, Gender) dom:death_date(A, D) dom:date(D, Day, Month, Year)
        }
        {
            answer: dom:dont_know()
        }
}

/* When? */
{
    condition: go:intent(when, Ymd),
    responses:
        {
            condition: go:exists(),
            preparation: go:split(Ymd, '-', Year, Month, Day),
            answer: dom:date(D, Day, Month, Year) dom:root(D)
        }
        {
            answer: dom:dont_know()
        }
}

/* Who is the husband of X? */
/* Who is the wife of X? */
{
    condition: go:intent(who, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:name(B, N, canonical_name) go:unify(B, C) go:make_list(List, C),
            answer: dom:name(B, N) dom:list(List),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* Who is X? */
{
    condition: go:intent(describe, B),
    responses:
        {
            condition: go:exists(),
            preparation: dom:long_description(B, D),
            answer: go:canned(D),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* What is X? */
{
    condition: go:intent(what, B),
    responses:
        /* What is the capital of X? */
        /* What is the largest state? */
        {
            condition: go:exists() dom:label(B, L),
            preparation: go:unify(B, C) go:make_list(List, C),
            answer: dom:name(B, L)  dom:list(List),
            result: B
        }
        /* What is the population of X? */
        {
            condition: go:exists(),
            answer: go:canned(B),
            result: B
        }
        {
            answer: dom:dont_know()
        }
}

/* How old is X? */
{
    condition: go:intent(how_old, E1),
    responses:
        /* The person has died already */
        {
            condition: dom:deceased(E1),
            preparation: 
                dom:gender(E1, Gender) 
                dom:birth_date(E1, BirthDate) go:split(BirthDate, '-', Year1, Month1, Day1)
                dom:death_date(E1, DeathDate) go:split(DeathDate, '-', Year2, Month2, Day2)
                go:date_subtract_years(DeathDate, BirthDate, Age)
            ,
            answer: 
                dom:gender(E1, Gender) 
                dom:report_age_deceased(E1, Age, BirthDate, DeathDate) 
                dom:date(BirthDate, Day1, Month1, Year1) 
                dom:date(DeathDate, Day2, Month2, Year2)
        }
        /* The person is still alive */
        {
            condition: go:exists(),
            preparation: 
                dom:gender(E1, Gender) 
                dom:age(E1, Age)
                dom:birth_date(E1, BirthDate) go:split(BirthDate, '-', Year, Month, Day)
            ,
            answer: 
                dom:gender(E1, Gender) 
                dom:report_age_alive(E1, Age, BirthDate) 
                dom:date(BirthDate, Day, Month, Year)
        }
        {
            answer: dom:dont_know()
        }
}
