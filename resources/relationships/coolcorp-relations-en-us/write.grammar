{ rule: s(S1) -> boolean(S1),                                                 condition: dom:result(S1) }
{ rule: s(S1) -> list(S1),                                                    condition: dom:list(S1) }
{ rule: s(S1) -> subject(E1) marry(P1) object(E2),                            condition: dom:married_to(E1, E2) }
{ rule: s(S1) -> subject(E2) have(S1) text(N) child(E1),                      condition: dom:have_child(E1, E2) go:count(E1, N) }

{ rule: subject(E) -> subjective_personal_pronoun(E),                         condition: dom:gender(E, _) }
{ rule: subject(E) -> proper_noun(E) }

{ rule: object(E) -> objective_personal_pronoun(E),                           condition: dom:gender(E, _) }
{ rule: object(E) -> proper_noun(E) }

{ rule: proper_noun(E1) -> text(Name),                                        condition: dom:name(E1, Name) }

{ rule: list(L1) -> np(Head) ',' list(Tail),                                condition: go:list_length(L1, Len) go:greater_than(Len, 2)
                                                                                go:list_head(L1, Head, Tail) }
{ rule: list(L1) -> np(First) 'and' np(Second),                            condition: go:list_length(L1, Len) go:equals(Len, 2)
                                                                                go:list_get(L1, 0, First) go:list_get(L1, 1, Second) }
{ rule: list(L1) -> np(First),                                             condition: go:list_get(L1, 0, First) }

{ rule: np(E1) -> proper_noun(E1) }

{ rule: boolean(B1) -> 'yes',                       condition: dom:result(true) }
{ rule: boolean(B1) -> 'no',                        condition: dom:result(false) }

{ rule: marry(P1) -> 'married' }
{ rule: have(P1) -> 'has' }

{ rule: child(P1) -> 'children' }

{ rule: objective_personal_pronoun(E) -> 'him',	    condition: dom:gender(E, male)  }
{ rule: objective_personal_pronoun(E) -> 'her',	    condition: dom:gender(E, female)  }

{ rule: subjective_personal_pronoun(E) -> 'he',	    condition: dom:gender(E, male)  }
{ rule: subjective_personal_pronoun(E) -> 'she',	condition: dom:gender(E, female)  }
